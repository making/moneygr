(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){

; Thrift = global.Thrift = require("c:\\Users\\makits.RDH\\git\\moneygr\\src\\main\\resources\\static\\lib\\thrift.js");
TUser = global.TUser = require("c:\\Users\\makits.RDH\\git\\moneygr\\src\\main\\resources\\static\\gen-js\\moneygr_types.js");
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

TUserService_findFamilies_args = function(args) {
};
TUserService_findFamilies_args.prototype = {};
TUserService_findFamilies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserService_findFamilies_args.prototype.write = function(output) {
  output.writeStructBegin('TUserService_findFamilies_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserService_findFamilies_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TUserService_findFamilies_result.prototype = {};
TUserService_findFamilies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new TFamily();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserService_findFamilies_result.prototype.write = function(output) {
  output.writeStructBegin('TUserService_findFamilies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserService_findUser_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
TUserService_findUser_args.prototype = {};
TUserService_findUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserService_findUser_args.prototype.write = function(output) {
  output.writeStructBegin('TUserService_findUser_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserService_findUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TUserService_findUser_result.prototype = {};
TUserService_findUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserService_findUser_result.prototype.write = function(output) {
  output.writeStructBegin('TUserService_findUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserService_create_args = function(args) {
  this.user = null;
  this.rawPassword = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.rawPassword !== undefined) {
      this.rawPassword = args.rawPassword;
    }
  }
};
TUserService_create_args.prototype = {};
TUserService_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rawPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserService_create_args.prototype.write = function(output) {
  output.writeStructBegin('TUserService_create_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.rawPassword !== null && this.rawPassword !== undefined) {
    output.writeFieldBegin('rawPassword', Thrift.Type.STRING, 2);
    output.writeString(this.rawPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserService_create_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TUserService_create_result.prototype = {};
TUserService_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUser();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserService_create_result.prototype.write = function(output) {
  output.writeStructBegin('TUserService_create_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TUserServiceClient.prototype = {};
TUserServiceClient.prototype.findFamilies = function(callback) {
  this.send_findFamilies(callback); 
  if (!callback) {
    return this.recv_findFamilies();
  }
};

TUserServiceClient.prototype.send_findFamilies = function(callback) {
  this.output.writeMessageBegin('findFamilies', Thrift.MessageType.CALL, this.seqid);
  var args = new TUserService_findFamilies_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findFamilies();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TUserServiceClient.prototype.recv_findFamilies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TUserService_findFamilies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findFamilies failed: unknown result';
};
TUserServiceClient.prototype.findUser = function(userId, callback) {
  this.send_findUser(userId, callback); 
  if (!callback) {
    return this.recv_findUser();
  }
};

TUserServiceClient.prototype.send_findUser = function(userId, callback) {
  this.output.writeMessageBegin('findUser', Thrift.MessageType.CALL, this.seqid);
  var args = new TUserService_findUser_args();
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findUser();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TUserServiceClient.prototype.recv_findUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TUserService_findUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findUser failed: unknown result';
};
TUserServiceClient.prototype.create = function(user, rawPassword, callback) {
  this.send_create(user, rawPassword, callback); 
  if (!callback) {
    return this.recv_create();
  }
};

TUserServiceClient.prototype.send_create = function(user, rawPassword, callback) {
  this.output.writeMessageBegin('create', Thrift.MessageType.CALL, this.seqid);
  var args = new TUserService_create_args();
  args.user = user;
  args.rawPassword = rawPassword;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TUserServiceClient.prototype.recv_create = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TUserService_create_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'create failed: unknown result';
};
; browserify_shim__define__module__export__(typeof TUserServiceClient != "undefined" ? TUserServiceClient : window.TUserServiceClient);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"c:\\Users\\makits.RDH\\git\\moneygr\\src\\main\\resources\\static\\gen-js\\moneygr_types.js":2,"c:\\Users\\makits.RDH\\git\\moneygr\\src\\main\\resources\\static\\lib\\thrift.js":3}],2:[function(require,module,exports){
(function (global){

; TRole = global.TRole = require("c:\\Users\\makits.RDH\\git\\moneygr\\src\\main\\resources\\static\\gen-js\\moneygr_types.js");
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TUser = function(args) {
  this.userId = null;
  this.email = null;
  this.firstName = null;
  this.lastName = null;
  this.family = null;
  this.roles = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.firstName !== undefined) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined) {
      this.lastName = args.lastName;
    }
    if (args.family !== undefined) {
      this.family = args.family;
    }
    if (args.roles !== undefined) {
      this.roles = args.roles;
    }
  }
};
TUser.prototype = {};
TUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.family = new TFamily();
        this.family.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.roles = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TRole();
          elem6.read(input);
          this.roles.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUser.prototype.write = function(output) {
  output.writeStructBegin('TUser');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 4);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 5);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRUCT, 6);
    this.family.write(output);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.roles.length);
    for (var iter7 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter7))
      {
        iter7 = this.roles[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFamily = function(args) {
  this.familyId = null;
  this.familyName = null;
  if (args) {
    if (args.familyId !== undefined) {
      this.familyId = args.familyId;
    }
    if (args.familyName !== undefined) {
      this.familyName = args.familyName;
    }
  }
};
TFamily.prototype = {};
TFamily.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.familyId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.familyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFamily.prototype.write = function(output) {
  output.writeStructBegin('TFamily');
  if (this.familyId !== null && this.familyId !== undefined) {
    output.writeFieldBegin('familyId', Thrift.Type.I32, 1);
    output.writeI32(this.familyId);
    output.writeFieldEnd();
  }
  if (this.familyName !== null && this.familyName !== undefined) {
    output.writeFieldBegin('familyName', Thrift.Type.STRING, 2);
    output.writeString(this.familyName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRole = function(args) {
  this.roleName = null;
  if (args) {
    if (args.roleName !== undefined) {
      this.roleName = args.roleName;
    }
  }
};
TRole.prototype = {};
TRole.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRole.prototype.write = function(output) {
  output.writeStructBegin('TRole');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
; browserify_shim__define__module__export__(typeof TUser != "undefined" ? TUser : window.TUser);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"c:\\Users\\makits.RDH\\git\\moneygr\\src\\main\\resources\\static\\gen-js\\moneygr_types.js":2}],3:[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*jshint evil:true*/

/**
 * The Thrift namespace houses the Apache Thrift JavaScript library 
 * elements providing JavaScript bindings for the Apache Thrift RPC 
 * system. End users will typically only directly make use of the 
 * Transport (TXHRTransport/TWebSocketTransport) and Protocol 
 * (TJSONPRotocol/TBinaryProtocol) constructors.
 * 
 * Object methods beginning with a __ (e.g. __onOpen()) are internal 
 * and should not be called outside of the object's own methods.
 * 
 * This library creates one global object: Thrift
 * Code in this library must never create additional global identifiers,
 * all features must be scoped within the Thrift namespace.
 * @namespace
 * @example
 *     var transport = new Thrift.Transport("http://localhost:8585");
 *     var protocol  = new Thrift.Protocol(transport);
 *     var client = new MyThriftSvcClient(protocol);
 *     var result = client.MyMethod();
 */
var Thrift = {
    /**
     * Thrift JavaScript library version.
     * @readonly
     * @const {string} Version
     * @memberof Thrift
     */
    Version: '0.9.2',

    /**
     * Thrift IDL type string to Id mapping.
     * @readonly
     * @property {number}  STOP   - End of a set of fields.
     * @property {number}  VOID   - No value (only legal for return types).
     * @property {number}  BOOL   - True/False integer.
     * @property {number}  BYTE   - Signed 8 bit integer.
     * @property {number}  I08    - Signed 8 bit integer.     
     * @property {number}  DOUBLE - 64 bit IEEE 854 floating point.
     * @property {number}  I16    - Signed 16 bit integer.
     * @property {number}  I32    - Signed 32 bit integer.
     * @property {number}  I64    - Signed 64 bit integer.
     * @property {number}  STRING - Array of bytes representing a string of characters.
     * @property {number}  UTF7   - Array of bytes representing a string of UTF7 encoded characters.
     * @property {number}  STRUCT - A multifield type.
     * @property {number}  MAP    - A collection type (map/associative-array/dictionary).
     * @property {number}  SET    - A collection type (unordered and without repeated values).
     * @property {number}  LIST   - A collection type (unordered).
     * @property {number}  UTF8   - Array of bytes representing a string of UTF8 encoded characters.
     * @property {number}  UTF16  - Array of bytes representing a string of UTF16 encoded characters.
     */
    Type: {
        'STOP' : 0,
        'VOID' : 1,
        'BOOL' : 2,
        'BYTE' : 3,
        'I08' : 3,
        'DOUBLE' : 4,
        'I16' : 6,
        'I32' : 8,
        'I64' : 10,
        'STRING' : 11,
        'UTF7' : 11,
        'STRUCT' : 12,
        'MAP' : 13,
        'SET' : 14,
        'LIST' : 15,
        'UTF8' : 16,
        'UTF16' : 17
    },

    /**
     * Thrift RPC message type string to Id mapping.
     * @readonly
     * @property {number}  CALL      - RPC call sent from client to server.
     * @property {number}  REPLY     - RPC call normal response from server to client.
     * @property {number}  EXCEPTION - RPC call exception response from server to client.
     * @property {number}  ONEWAY    - Oneway RPC call from client to server with no response.
     */
    MessageType: {
        'CALL' : 1,
        'REPLY' : 2,
        'EXCEPTION' : 3,
        'ONEWAY' : 4
    },

    /**
     * Utility function returning the count of an object's own properties.
     * @param {object} obj - Object to test.
     * @returns {number} number of object's own properties
     */
    objectLength: function(obj) {
        var length = 0;
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                length++;
            }
        }
        return length;
    },

    /**
     * Utility function to establish prototype inheritance.
     * @see {@link http://javascript.crockford.com/prototypal.html|Prototypal Inheritance}
     * @param {function} constructor - Contstructor function to set as derived.
     * @param {function} superConstructor - Contstructor function to set as base.
     * @param {string} [name] - Type name to set as name property in derived prototype.
     */
    inherits: function(constructor, superConstructor, name) {
      function F() {}
      F.prototype = superConstructor.prototype;
      constructor.prototype = new F();
      constructor.prototype.name = name || "";
    }
};

/**
 * Initializes a Thrift TException instance.
 * @constructor
 * @augments Error
 * @param {string} message - The TException message (distinct from the Error message).
 * @classdesc TException is the base class for all Thrift exceptions types.
 */
Thrift.TException = function(message) {
    this.message = message;
};
Thrift.inherits(Thrift.TException, Error, 'TException');

/**
 * Returns the message set on the exception.
 * @readonly
 * @returns {string} exception message
 */
Thrift.TException.prototype.getMessage = function() {
    return this.message;
};

/**
 * Thrift Application Exception type string to Id mapping.
 * @readonly
 * @property {number}  UNKNOWN                 - Unknown/undefined.
 * @property {number}  UNKNOWN_METHOD          - Client attempted to call a method unknown to the server.
 * @property {number}  INVALID_MESSAGE_TYPE    - Client passed an unknown/unsupported MessageType.
 * @property {number}  WRONG_METHOD_NAME       - Unused.
 * @property {number}  BAD_SEQUENCE_ID         - Unused in Thrift RPC, used to flag proprietary sequence number errors.
 * @property {number}  MISSING_RESULT          - Raised by a server processor if a handler fails to supply the required return result.
 * @property {number}  INTERNAL_ERROR          - Something bad happened.
 * @property {number}  PROTOCOL_ERROR          - The protocol layer failed to serialize or deserialize data.
 * @property {number}  INVALID_TRANSFORM       - Unused.
 * @property {number}  INVALID_PROTOCOL        - The protocol (or version) is not supported.
 * @property {number}  UNSUPPORTED_CLIENT_TYPE - Unused.
 */
Thrift.TApplicationExceptionType = {
    'UNKNOWN' : 0,
    'UNKNOWN_METHOD' : 1,
    'INVALID_MESSAGE_TYPE' : 2,
    'WRONG_METHOD_NAME' : 3,
    'BAD_SEQUENCE_ID' : 4,
    'MISSING_RESULT' : 5,
    'INTERNAL_ERROR' : 6,
    'PROTOCOL_ERROR' : 7,
    'INVALID_TRANSFORM' : 8,
    'INVALID_PROTOCOL' : 9,
    'UNSUPPORTED_CLIENT_TYPE' : 10
};

/**
 * Initializes a Thrift TApplicationException instance.
 * @constructor
 * @augments Thrift.TException
 * @param {string} message - The TApplicationException message (distinct from the Error message).
 * @param {Thrift.TApplicationExceptionType} [code] - The TApplicationExceptionType code.
 * @classdesc TApplicationException is the exception class used to propagate exceptions from an RPC server back to a calling client.
*/
Thrift.TApplicationException = function(message, code) {
    this.message = message;
    this.code = typeof code === "number" ? code : 0;
};
Thrift.inherits(Thrift.TApplicationException, Thrift.TException, 'TApplicationException');

/**
 * Read a TApplicationException from the supplied protocol.
 * @param {object} input - The input protocol to read from.
 */
Thrift.TApplicationException.prototype.read = function(input) {
    while (1) {
        var ret = input.readFieldBegin();

        if (ret.ftype == Thrift.Type.STOP) {
            break;
        }

        var fid = ret.fid;

        switch (fid) {
            case 1:
                if (ret.ftype == Thrift.Type.STRING) {
                    ret = input.readString();
                    this.message = ret.value;
                } else {
                    ret = input.skip(ret.ftype);
                }
                break;
            case 2:
                if (ret.ftype == Thrift.Type.I32) {
                    ret = input.readI32();
                    this.code = ret.value;
                } else {
                    ret = input.skip(ret.ftype);
                }
                break;
           default:
                ret = input.skip(ret.ftype);
                break;
        }

        input.readFieldEnd();
    }

    input.readStructEnd();
};

/**
 * Wite a TApplicationException to the supplied protocol.
 * @param {object} output - The output protocol to write to.
 */
Thrift.TApplicationException.prototype.write = function(output) {
    output.writeStructBegin('TApplicationException');

    if (this.message) {
        output.writeFieldBegin('message', Thrift.Type.STRING, 1);
        output.writeString(this.getMessage());
        output.writeFieldEnd();
    }

    if (this.code) {
        output.writeFieldBegin('type', Thrift.Type.I32, 2);
        output.writeI32(this.code);
        output.writeFieldEnd();
    }

    output.writeFieldStop();
    output.writeStructEnd();
};

/**
 * Returns the application exception code set on the exception.
 * @readonly
 * @returns {Thrift.TApplicationExceptionType} exception code
 */
Thrift.TApplicationException.prototype.getCode = function() {
    return this.code;
};

/**
 * Constructor Function for the XHR transport.
 * If you do not specify a url then you must handle XHR operations on
 * your own. This type can also be constructed using the Transport alias
 * for backward compatibility.
 * @constructor
 * @param {string} [url] - The URL to connect to.
 * @classdesc The Apache Thrift Transport layer performs byte level I/O 
 * between RPC clients and servers. The JavaScript TXHRTransport object 
 * uses Http[s]/XHR. Target servers must implement the http[s] transport
 * (see: node.js example server_http.js).
 * @example
 *     var transport = new Thrift.TXHRTransport("http://localhost:8585");
 */
Thrift.Transport = Thrift.TXHRTransport = function(url, options) {
    this.url = url;
    this.wpos = 0;
    this.rpos = 0;
    this.useCORS = (options && options.useCORS);
    this.send_buf = '';
    this.recv_buf = '';
};

Thrift.TXHRTransport.prototype = {
    /**
     * Gets the browser specific XmlHttpRequest Object.
     * @returns {object} the browser XHR interface object
     */
    getXmlHttpRequestObject: function() {
        try { return new XMLHttpRequest(); } catch (e1) { }
        try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch (e2) { }
        try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch (e3) { }

        throw "Your browser doesn't support XHR.";
    },

    /**
     * Sends the current XRH request if the transport was created with a URL 
     * and the async parameter is false. If the transport was not created with
     * a URL, or the async parameter is True and no callback is provided, or 
     * the URL is an empty string, the current send buffer is returned.
     * @param {object} async - If true the current send buffer is returned.
     * @param {object} callback - Optional async completion callback 
     * @returns {undefined|string} Nothing or the current send buffer.
     * @throws {string} If XHR fails.
     */
    flush: function(async, callback) {
        var self = this;
        if ((async && !callback) || this.url === undefined || this.url === '') {
            return this.send_buf;
        }

        var xreq = this.getXmlHttpRequestObject();

        if (xreq.overrideMimeType) {
            xreq.overrideMimeType('application/json');
        }

        if (callback) {
            //Ignore XHR callbacks until the data arrives, then call the
            //  client's callback
            xreq.onreadystatechange = 
              (function() {
                var clientCallback = callback;    
                return function() {
                  if (this.readyState == 4 && this.status == 200) {
                    self.setRecvBuffer(this.responseText);
                    clientCallback();
                  }
                };
              }());
        }

        xreq.open('POST', this.url, !!async);
        xreq.send(this.send_buf);
        if (async && callback) {
            return;
        }

        if (xreq.readyState != 4) {
            throw 'encountered an unknown ajax ready state: ' + xreq.readyState;
        }

        if (xreq.status != 200) {
            throw 'encountered a unknown request status: ' + xreq.status;
        }

        this.recv_buf = xreq.responseText;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Creates a jQuery XHR object to be used for a Thrift server call.
     * @param {object} client - The Thrift Service client object generated by the IDL compiler.
     * @param {object} postData - The message to send to the server.
     * @param {function} args - The original call arguments with the success call back at the end.
     * @param {function} recv_method - The Thrift Service Client receive method for the call.
     * @returns {object} A new jQuery XHR object.
     * @throws {string} If the jQuery version is prior to 1.5 or if jQuery is not found.
     */
    jqRequest: function(client, postData, args, recv_method) {
        if (typeof jQuery === 'undefined' ||
            typeof jQuery.Deferred === 'undefined') {
            throw 'Thrift.js requires jQuery 1.5+ to use asynchronous requests';
        }

        var thriftTransport = this;

        var jqXHR = jQuery.ajax({
            url: this.url,
            data: postData,
            type: 'POST',
            cache: false,
            contentType: 'application/json',
            dataType: 'text thrift',
            converters: {
                'text thrift' : function(responseData) {
                    thriftTransport.setRecvBuffer(responseData);
                    var value = recv_method.call(client);
                    return value;
                }
            },
            context: client,
            success: jQuery.makeArray(args).pop()
        });

        return jqXHR;
    },

    /**
     * Sets the buffer to provide the protocol when deserializing.
     * @param {string} buf - The buffer to supply the protocol.
     */
    setRecvBuffer: function(buf) {
        this.recv_buf = buf;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Returns true if the transport is open, XHR always returns true.
     * @readonly
     * @returns {boolean} Always True.
     */    
    isOpen: function() {
        return true;
    },

    /**
     * Opens the transport connection, with XHR this is a nop.
     */    
    open: function() {},

    /**
     * Closes the transport connection, with XHR this is a nop.
     */    
    close: function() {},

    /**
     * Returns the specified number of characters from the response
     * buffer.
     * @param {number} len - The number of characters to return.
     * @returns {string} Characters sent by the server.
     */
    read: function(len) {
        var avail = this.wpos - this.rpos;

        if (avail === 0) {
            return '';
        }

        var give = len;

        if (avail < len) {
            give = avail;
        }

        var ret = this.read_buf.substr(this.rpos, give);
        this.rpos += give;

        //clear buf when complete?
        return ret;
    },

    /**
     * Returns the entire response buffer.
     * @returns {string} Characters sent by the server.
     */
    readAll: function() {
        return this.recv_buf;
    },

    /**
     * Sets the send buffer to buf.
     * @param {string} buf - The buffer to send.
     */    
    write: function(buf) {
        this.send_buf = buf;
    },

    /**
     * Returns the send buffer.
     * @readonly
     * @returns {string} The send buffer.
     */ 
    getSendBuffer: function() {
        return this.send_buf;
    }

};


/**
 * Constructor Function for the WebSocket transport.
 * @constructor
 * @param {string} [url] - The URL to connect to.
 * @classdesc The Apache Thrift Transport layer performs byte level I/O 
 * between RPC clients and servers. The JavaScript TWebSocketTransport object 
 * uses the WebSocket protocol. Target servers must implement WebSocket.
 * (see: node.js example server_http.js).
 * @example
 *   var transport = new Thrift.TWebSocketTransport("http://localhost:8585");
 */
Thrift.TWebSocketTransport = function(url) {
    this.__reset(url);
};

Thrift.TWebSocketTransport.prototype = {
    __reset: function(url) {
      this.url = url;             //Where to connect
      this.socket = null;         //The web socket
      this.callbacks = [];        //Pending callbacks
      this.send_pending = [];     //Buffers/Callback pairs waiting to be sent
      this.send_buf = '';         //Outbound data, immutable until sent
      this.recv_buf = '';         //Inbound data
      this.rb_wpos = 0;           //Network write position in receive buffer
      this.rb_rpos = 0;           //Client read position in receive buffer
    },

    /**
     * Sends the current WS request and registers callback. The async 
     * parameter is ignored (WS flush is always async) and the callback 
     * function parameter is required.
     * @param {object} async - Ignored.
     * @param {object} callback - The client completion callback.
     * @returns {undefined|string} Nothing (undefined) 
     */
    flush: function(async, callback) {
      var self = this;
      if (this.isOpen()) {
        //Send data and register a callback to invoke the client callback
        this.socket.send(this.send_buf); 
        this.callbacks.push((function() {
          var clientCallback = callback;    
          return function(msg) {
            self.setRecvBuffer(msg);
            clientCallback();
          };
        }()));
      } else {
        //Queue the send to go out __onOpen
        this.send_pending.push({
          buf: this.send_buf,
          cb:  callback
        });
      }
    },

    __onOpen: function() { 
       var self = this;
       if (this.send_pending.length > 0) {
          //If the user made calls before the connection was fully 
          //open, send them now
          this.send_pending.forEach(function(elem) {
             this.socket.send(elem.buf);
             this.callbacks.push((function() {
               var clientCallback = elem.cb;    
               return function(msg) {
                  self.setRecvBuffer(msg);
                  clientCallback();
               };
             }()));
          });
          this.send_pending = [];
       }
    },
    
    __onClose: function(evt) { 
      this.__reset(this.url);
    },
     
    __onMessage: function(evt) {
      if (this.callbacks.length) {
        this.callbacks.shift()(evt.data);
      }
    },
     
    __onError: function(evt) { 
      console.log("Thrift WebSocket Error: " + evt.toString());
      this.socket.close();
    },

    /**
     * Sets the buffer to use when receiving server responses.
     * @param {string} buf - The buffer to receive server responses.
     */
    setRecvBuffer: function(buf) {
        this.recv_buf = buf;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Returns true if the transport is open
     * @readonly
     * @returns {boolean} 
     */    
    isOpen: function() {
        return this.socket && this.socket.readyState == this.socket.OPEN;
    },

    /**
     * Opens the transport connection
     */    
    open: function() {
      //If OPEN/CONNECTING/CLOSING ignore additional opens
      if (this.socket && this.socket.readyState != this.socket.CLOSED) {
        return;
      }
      //If there is no socket or the socket is closed:
      this.socket = new WebSocket(this.url);
      this.socket.onopen = this.__onOpen.bind(this); 
      this.socket.onmessage = this.__onMessage.bind(this); 
      this.socket.onerror = this.__onError.bind(this); 
      this.socket.onclose = this.__onClose.bind(this); 
    },

    /**
     * Closes the transport connection
     */    
    close: function() {
      this.socket.close();
    },

    /**
     * Returns the specified number of characters from the response
     * buffer.
     * @param {number} len - The number of characters to return.
     * @returns {string} Characters sent by the server.
     */
    read: function(len) {
        var avail = this.wpos - this.rpos;

        if (avail === 0) {
            return '';
        }

        var give = len;

        if (avail < len) {
            give = avail;
        }

        var ret = this.read_buf.substr(this.rpos, give);
        this.rpos += give;

        //clear buf when complete?
        return ret;
    },

    /**
     * Returns the entire response buffer.
     * @returns {string} Characters sent by the server.
     */
    readAll: function() {
        return this.recv_buf;
    },

    /**
     * Sets the send buffer to buf.
     * @param {string} buf - The buffer to send.
     */    
    write: function(buf) {
        this.send_buf = buf;
    },

    /**
     * Returns the send buffer.
     * @readonly
     * @returns {string} The send buffer.
     */ 
    getSendBuffer: function() {
        return this.send_buf;
    }

};

/**
 * Initializes a Thrift JSON protocol instance.
 * @constructor
 * @param {Thrift.Transport} transport - The transport to serialize to/from.
 * @classdesc Apache Thrift Protocols perform serialization which enables cross 
 * language RPC. The Protocol type is the JavaScript browser implementation 
 * of the Apache Thrift TJSONProtocol.
 * @example
 *     var protocol  = new Thrift.Protocol(transport);
 */
Thrift.TJSONProtocol = Thrift.Protocol = function(transport) {
    this.transport = transport;
};

/**
 * Thrift IDL type Id to string mapping.
 * @readonly
 * @see {@link Thrift.Type}
 */
Thrift.Protocol.Type = {};
Thrift.Protocol.Type[Thrift.Type.BOOL] = '"tf"';
Thrift.Protocol.Type[Thrift.Type.BYTE] = '"i8"';
Thrift.Protocol.Type[Thrift.Type.I16] = '"i16"';
Thrift.Protocol.Type[Thrift.Type.I32] = '"i32"';
Thrift.Protocol.Type[Thrift.Type.I64] = '"i64"';
Thrift.Protocol.Type[Thrift.Type.DOUBLE] = '"dbl"';
Thrift.Protocol.Type[Thrift.Type.STRUCT] = '"rec"';
Thrift.Protocol.Type[Thrift.Type.STRING] = '"str"';
Thrift.Protocol.Type[Thrift.Type.MAP] = '"map"';
Thrift.Protocol.Type[Thrift.Type.LIST] = '"lst"';
Thrift.Protocol.Type[Thrift.Type.SET] = '"set"';

/**
 * Thrift IDL type string to Id mapping.
 * @readonly
 * @see {@link Thrift.Type}
 */
Thrift.Protocol.RType = {};
Thrift.Protocol.RType.tf = Thrift.Type.BOOL;
Thrift.Protocol.RType.i8 = Thrift.Type.BYTE;
Thrift.Protocol.RType.i16 = Thrift.Type.I16;
Thrift.Protocol.RType.i32 = Thrift.Type.I32;
Thrift.Protocol.RType.i64 = Thrift.Type.I64;
Thrift.Protocol.RType.dbl = Thrift.Type.DOUBLE;
Thrift.Protocol.RType.rec = Thrift.Type.STRUCT;
Thrift.Protocol.RType.str = Thrift.Type.STRING;
Thrift.Protocol.RType.map = Thrift.Type.MAP;
Thrift.Protocol.RType.lst = Thrift.Type.LIST;
Thrift.Protocol.RType.set = Thrift.Type.SET;

/**
 * The TJSONProtocol version number.
 * @readonly
 * @const {number} Version
 * @memberof Thrift.Protocol
 */
 Thrift.Protocol.Version = 1;

Thrift.Protocol.prototype = {
    /**
     * Returns the underlying transport.
     * @readonly
     * @returns {Thrift.Transport} The underlying transport.
     */ 
    getTransport: function() {
        return this.transport;
    },

    /**
     * Serializes the beginning of a Thrift RPC message.
     * @param {string} name - The service method to call.
     * @param {Thrift.MessageType} messageType - The type of method call.
     * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).
     */
    writeMessageBegin: function(name, messageType, seqid) {
        this.tstack = [];
        this.tpos = [];

        this.tstack.push([Thrift.Protocol.Version, '"' +
            name + '"', messageType, seqid]);
    },

    /**
     * Serializes the end of a Thrift RPC message.
     */
    writeMessageEnd: function() {
        var obj = this.tstack.pop();

        this.wobj = this.tstack.pop();
        this.wobj.push(obj);

        this.wbuf = '[' + this.wobj.join(',') + ']';

        this.transport.write(this.wbuf);
     },


    /**
     * Serializes the beginning of a struct.
     * @param {string} name - The name of the struct.
     */
    writeStructBegin: function(name) {
        this.tpos.push(this.tstack.length);
        this.tstack.push({});
    },

    /**
     * Serializes the end of a struct.
     */
    writeStructEnd: function() {

        var p = this.tpos.pop();
        var struct = this.tstack[p];
        var str = '{';
        var first = true;
        for (var key in struct) {
            if (first) {
                first = false;
            } else {
                str += ',';
            }

            str += key + ':' + struct[key];
        }

        str += '}';
        this.tstack[p] = str;
    },

    /**
     * Serializes the beginning of a struct field.
     * @param {string} name - The name of the field.
     * @param {Thrift.Protocol.Type} fieldType - The data type of the field.
     * @param {number} fieldId - The field's unique identifier.
     */
    writeFieldBegin: function(name, fieldType, fieldId) {
        this.tpos.push(this.tstack.length);
        this.tstack.push({ 'fieldId': '"' +
            fieldId + '"', 'fieldType': Thrift.Protocol.Type[fieldType]
        });

    },

    /**
     * Serializes the end of a field.
     */
    writeFieldEnd: function() {
        var value = this.tstack.pop();
        var fieldInfo = this.tstack.pop();

        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +
            fieldInfo.fieldType + ':' + value + '}';
        this.tpos.pop();
    },

    /**
     * Serializes the end of the set of fields for a struct.
     */
    writeFieldStop: function() {
        //na
    },

    /**
     * Serializes the beginning of a map collection.
     * @param {Thrift.Type} keyType - The data type of the key.
     * @param {Thrift.Type} valType - The data type of the value.
     * @param {number} [size] - The number of elements in the map (ignored).
     */
    writeMapBegin: function(keyType, valType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[keyType],
            Thrift.Protocol.Type[valType], 0]);
    },

    /**
     * Serializes the end of a map.
     */
    writeMapEnd: function() {
        var p = this.tpos.pop();

        if (p == this.tstack.length) {
            return;
        }

        if ((this.tstack.length - p - 1) % 2 !== 0) {
            this.tstack.push('');
        }

        var size = (this.tstack.length - p - 1) / 2;

        this.tstack[p][this.tstack[p].length - 1] = size;

        var map = '}';
        var first = true;
        while (this.tstack.length > p + 1) {
            var v = this.tstack.pop();
            var k = this.tstack.pop();
            if (first) {
                first = false;
            } else {
                map = ',' + map;
            }

            if (! isNaN(k)) { k = '"' + k + '"'; } //json "keys" need to be strings
            map = k + ':' + v + map;
        }
        map = '{' + map;

        this.tstack[p].push(map);
        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /**
     * Serializes the beginning of a list collection.
     * @param {Thrift.Type} elemType - The data type of the elements.
     * @param {number} size - The number of elements in the list.
     */
    writeListBegin: function(elemType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[elemType], size]);
    },

    /**
     * Serializes the end of a list.
     */
    writeListEnd: function() {
        var p = this.tpos.pop();

        while (this.tstack.length > p + 1) {
            var tmpVal = this.tstack[p + 1];
            this.tstack.splice(p + 1, 1);
            this.tstack[p].push(tmpVal);
        }

        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /**
     * Serializes the beginning of a set collection.
     * @param {Thrift.Type} elemType - The data type of the elements.
     * @param {number} size - The number of elements in the list.
     */
    writeSetBegin: function(elemType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[elemType], size]);
    },

    /**
     * Serializes the end of a set.
     */
    writeSetEnd: function() {
        var p = this.tpos.pop();

        while (this.tstack.length > p + 1) {
            var tmpVal = this.tstack[p + 1];
            this.tstack.splice(p + 1, 1);
            this.tstack[p].push(tmpVal);
        }

        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /** Serializes a boolean */
    writeBool: function(value) {
        this.tstack.push(value ? 1 : 0);
    },

    /** Serializes a number */
    writeByte: function(i8) {
        this.tstack.push(i8);
    },

    /** Serializes a number */
    writeI16: function(i16) {
        this.tstack.push(i16);
    },

    /** Serializes a number */
    writeI32: function(i32) {
        this.tstack.push(i32);
    },

    /** Serializes a number */
    writeI64: function(i64) {
        this.tstack.push(i64);
    },

    /** Serializes a number */
    writeDouble: function(dbl) {
        this.tstack.push(dbl);
    },

    /** Serializes a string */
    writeString: function(str) {
        // We do not encode uri components for wire transfer:
        if (str === null) {
            this.tstack.push(null);
        } else {
            // concat may be slower than building a byte buffer
            var escapedString = '';
            for (var i = 0; i < str.length; i++) {
                var ch = str.charAt(i);      // a single double quote: "
                if (ch === '\"') {
                    escapedString += '\\\"'; // write out as: \"
                } else if (ch === '\\') {    // a single backslash
                    escapedString += '\\\\'; // write out as double backslash 
                } else if (ch === '\b') {    // a single backspace: invisible
                    escapedString += '\\b';  // write out as: \b"
                } else if (ch === '\f') {    // a single formfeed: invisible
                    escapedString += '\\f';  // write out as: \f"
                } else if (ch === '\n') {    // a single newline: invisible
                    escapedString += '\\n';  // write out as: \n"
                } else if (ch === '\r') {    // a single return: invisible
                    escapedString += '\\r';  // write out as: \r"
                } else if (ch === '\t') {    // a single tab: invisible
                    escapedString += '\\t';  // write out as: \t"
                } else {
                    escapedString += ch;     // Else it need not be escaped
                }
            }
            this.tstack.push('"' + escapedString + '"');
        }
    },

    /** Serializes a string */
    writeBinary: function(str) {
        this.writeString(str);
    },

    /**
       @class
       @name AnonReadMessageBeginReturn
       @property {string} fname - The name of the service method.
       @property {Thrift.MessageType} mtype - The type of message call.
       @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).
     */
    /** 
     * Deserializes the beginning of a message. 
     * @returns {AnonReadMessageBeginReturn}
     */
    readMessageBegin: function() {
        this.rstack = [];
        this.rpos = [];

        if (typeof JSON !== 'undefined' && typeof JSON.parse === 'function') {
            this.robj = JSON.parse(this.transport.readAll());
        } else if (typeof jQuery !== 'undefined') {
            this.robj = jQuery.parseJSON(this.transport.readAll());
        } else {
            this.robj = eval(this.transport.readAll());
        }

        var r = {};
        var version = this.robj.shift();

        if (version != Thrift.Protocol.Version) {
            throw 'Wrong thrift protocol version: ' + version;
        }

        r.fname = this.robj.shift();
        r.mtype = this.robj.shift();
        r.rseqid = this.robj.shift();


        //get to the main obj
        this.rstack.push(this.robj.shift());

        return r;
    },

    /** Deserializes the end of a message. */
    readMessageEnd: function() {
    },

    /** 
     * Deserializes the beginning of a struct. 
     * @param {string} [name] - The name of the struct (ignored)
     * @returns {object} - An object with an empty string fname property
     */    
    readStructBegin: function(name) {
        var r = {};
        r.fname = '';

        //incase this is an array of structs
        if (this.rstack[this.rstack.length - 1] instanceof Array) {
            this.rstack.push(this.rstack[this.rstack.length - 1].shift());
        }

        return r;
    },

    /** Deserializes the end of a struct. */
    readStructEnd: function() {
        if (this.rstack[this.rstack.length - 2] instanceof Array) {
            this.rstack.pop();
        }
    },

    /**
       @class
       @name AnonReadFieldBeginReturn
       @property {string} fname - The name of the field (always '').
       @property {Thrift.Type} ftype - The data type of the field.
       @property {number} fid - The unique identifier of the field.
     */
    /** 
     * Deserializes the beginning of a field. 
     * @returns {AnonReadFieldBeginReturn}
     */
    readFieldBegin: function() {
        var r = {};

        var fid = -1;
        var ftype = Thrift.Type.STOP;

        //get a fieldId
        for (var f in (this.rstack[this.rstack.length - 1])) {
            if (f === null) {
              continue;
            }

            fid = parseInt(f, 10);
            this.rpos.push(this.rstack.length);

            var field = this.rstack[this.rstack.length - 1][fid];

            //remove so we don't see it again
            delete this.rstack[this.rstack.length - 1][fid];

            this.rstack.push(field);

            break;
        }

        if (fid != -1) {

            //should only be 1 of these but this is the only
            //way to match a key
            for (var i in (this.rstack[this.rstack.length - 1])) {
                if (Thrift.Protocol.RType[i] === null) {
                    continue;
                }

                ftype = Thrift.Protocol.RType[i];
                this.rstack[this.rstack.length - 1] =
                    this.rstack[this.rstack.length - 1][i];
            }
        }

        r.fname = '';
        r.ftype = ftype;
        r.fid = fid;

        return r;
    },

    /** Deserializes the end of a field. */
    readFieldEnd: function() {
        var pos = this.rpos.pop();

        //get back to the right place in the stack
        while (this.rstack.length > pos) {
            this.rstack.pop();
        }

    },

    /**
       @class
       @name AnonReadMapBeginReturn
       @property {Thrift.Type} ktype - The data type of the key.
       @property {Thrift.Type} vtype - The data type of the value.
       @property {number} size - The number of elements in the map.
     */
    /** 
     * Deserializes the beginning of a map. 
     * @returns {AnonReadMapBeginReturn}
     */
    readMapBegin: function() {
        var map = this.rstack.pop();
        var first = map.shift();
        if (first instanceof Array) {
          this.rstack.push(map);
          map = first;
          first = map.shift();
        }

        var r = {};
        r.ktype = Thrift.Protocol.RType[first];
        r.vtype = Thrift.Protocol.RType[map.shift()];
        r.size = map.shift();


        this.rpos.push(this.rstack.length);
        this.rstack.push(map.shift());

        return r;
    },

    /** Deserializes the end of a map. */
    readMapEnd: function() {
        this.readFieldEnd();
    },

    /**
       @class
       @name AnonReadColBeginReturn
       @property {Thrift.Type} etype - The data type of the element.
       @property {number} size - The number of elements in the collection.
     */
    /** 
     * Deserializes the beginning of a list. 
     * @returns {AnonReadColBeginReturn}
     */
    readListBegin: function() {
        var list = this.rstack[this.rstack.length - 1];

        var r = {};
        r.etype = Thrift.Protocol.RType[list.shift()];
        r.size = list.shift();

        this.rpos.push(this.rstack.length);
        this.rstack.push(list);

        return r;
    },

    /** Deserializes the end of a list. */
    readListEnd: function() {
        this.readFieldEnd();
    },

    /** 
     * Deserializes the beginning of a set. 
     * @returns {AnonReadColBeginReturn}
     */
    readSetBegin: function(elemType, size) {
        return this.readListBegin(elemType, size);
    },

    /** Deserializes the end of a set. */
    readSetEnd: function() {
        return this.readListEnd();
    },

    /** Returns an object with a value property set to 
     *  False unless the next number in the protocol buffer 
     *  is 1, in which case teh value property is True */
    readBool: function() {
        var r = this.readI32();

        if (r !== null && r.value == '1') {
            r.value = true;
        } else {
            r.value = false;
        }

        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readByte: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI16: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI32: function(f) {
        if (f === undefined) {
            f = this.rstack[this.rstack.length - 1];
        }

        var r = {};

        if (f instanceof Array) {
            if (f.length === 0) {
                r.value = undefined;
            } else {
                r.value = f.shift();
            }
        } else if (f instanceof Object) {
           for (var i in f) {
                if (i === null) {
                  continue;
                }
                this.rstack.push(f[i]);
                delete f[i];

                r.value = i;
                break;
           }
        } else {
            r.value = f;
            this.rstack.pop();
        }

        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI64: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readDouble: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readString: function() {
        var r = this.readI32();
        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readBinary: function() {
        return this.readString();
    },

    /** 
     * Method to arbitrarily skip over data */
    skip: function(type) {
        var ret, i;
        switch (type) {
            case Thrift.Type.STOP:
                return null;

            case Thrift.Type.BOOL:
                return this.readBool();

            case Thrift.Type.BYTE:
                return this.readByte();

            case Thrift.Type.I16:
                return this.readI16();

            case Thrift.Type.I32:
                return this.readI32();

            case Thrift.Type.I64:
                return this.readI64();

            case Thrift.Type.DOUBLE:
                return this.readDouble();

            case Thrift.Type.STRING:
                return this.readString();

            case Thrift.Type.STRUCT:
                this.readStructBegin();
                while (true) {
                    ret = this.readFieldBegin();
                    if (ret.ftype == Thrift.Type.STOP) {
                        break;
                    }
                    this.skip(ret.ftype);
                    this.readFieldEnd();
                }
                this.readStructEnd();
                return null;

            case Thrift.Type.MAP:
                ret = this.readMapBegin();
                for (i = 0; i < ret.size; i++) {
                    if (i > 0) {
                        if (this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {
                            this.rstack.pop();
                        }
                    }
                    this.skip(ret.ktype);
                    this.skip(ret.vtype);
                }
                this.readMapEnd();
                return null;

            case Thrift.Type.SET:
                ret = this.readSetBegin();
                for (i = 0; i < ret.size; i++) {
                    this.skip(ret.etype);
                }
                this.readSetEnd();
                return null;

            case Thrift.Type.LIST:
                ret = this.readListBegin();
                for (i = 0; i < ret.size; i++) {
                    this.skip(ret.etype);
                }
                this.readListEnd();
                return null;
        }
    }
};


/**
 * Initializes a MutilplexProtocol Implementation as a Wrapper for Thrift.Protocol
 * @constructor
 */
Thrift.MultiplexProtocol = function (srvName, trans, strictRead, strictWrite) {
    Thrift.Protocol.call(this, trans, strictRead, strictWrite);
    this.serviceName = srvName;
};
Thrift.inherits(Thrift.MultiplexProtocol, Thrift.Protocol, 'multiplexProtocol');

/** Override writeMessageBegin method of prototype*/
Thrift.MultiplexProtocol.prototype.writeMessageBegin = function (name, type, seqid) {

    if (type === Thrift.MessageType.CALL || type === Thrift.MessageType.ONEWAY) {
        Thrift.Protocol.prototype.writeMessageBegin.call(this, this.serviceName + ":" + name, type, seqid);
    } else {
        Thrift.Protocol.prototype.writeMessageBegin.call(this, name, type, seqid);
    }
};

Thrift.Multiplexer = function () {
    this.seqid = 0;
};

/** Instantiates a multiplexed client for a specific service
 * @constructor
 * @param {String} serviceName - The transport to serialize to/from.
 * @param {Thrift.ServiceClient} SCl - The Service Client Class
 * @param {Thrift.Transport} transport - Thrift.Transport instance which provides remote host:port
 * @example
 *    var mp = new Thrift.Multiplexer();
 *    var transport = new Thrift.Transport("http://localhost:9090/foo.thrift");
 *    var protocol = new Thrift.Protocol(transport);
 *    var client = mp.createClient('AuthService', AuthServiceClient, transport);
*/
Thrift.Multiplexer.prototype.createClient = function (serviceName, SCl, transport) {
    if (SCl.Client) {
        SCl = SCl.Client;
    }
    var self = this;
    SCl.prototype.new_seqid = function () {
        self.seqid += 1;
        return self.seqid;
    };
    var client = new SCl(new Thrift.MultiplexProtocol(serviceName, transport));

    return client;
};

; browserify_shim__define__module__export__(typeof Thrift != "undefined" ? Thrift : window.Thrift);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],4:[function(require,module,exports){
var Thrift = require('thrift');
var TUserServiceClient = require('TUserServiceClient');

var transport = new Thrift.Transport("http://localhost:8080/user");
var protocol = new Thrift.Protocol(transport);
var client = new TUserServiceClient(protocol);

client.findUser(1, function (user) {
    document.getElementById('example').innerHTML = JSON.stringify(user);
});
},{"TUserServiceClient":1,"thrift":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjOlxcVXNlcnNcXG1ha2l0cy5SREhcXGdpdFxcbW9uZXlnclxcc3JjXFxtYWluXFxyZXNvdXJjZXNcXHN0YXRpY1xcZ2VuLWpzXFxUVXNlclNlcnZpY2UuanMiLCJjOlxcVXNlcnNcXG1ha2l0cy5SREhcXGdpdFxcbW9uZXlnclxcc3JjXFxtYWluXFxyZXNvdXJjZXNcXHN0YXRpY1xcZ2VuLWpzXFxtb25leWdyX3R5cGVzLmpzIiwiYzpcXFVzZXJzXFxtYWtpdHMuUkRIXFxnaXRcXG1vbmV5Z3JcXHNyY1xcbWFpblxccmVzb3VyY2VzXFxzdGF0aWNcXGxpYlxcdGhyaWZ0LmpzIiwiYzpcXFVzZXJzXFxtYWtpdHMuUkRIXFxnaXRcXG1vbmV5Z3JcXHNyY1xcbWFpblxccmVzb3VyY2VzXFxzdGF0aWNcXHNyY1xcaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUEsRUFBRTtBQUNGLDJDQUEyQztBQUMzQyxFQUFFO0FBQ0YsbUVBQW1FO0FBQ25FLEVBQUU7QUFDRjs7QUFFQSxpQ0FBaUM7O0FBRWpDLDhCQUE4QixHQUFHLFNBQVMsSUFBSSxFQUFFO0NBQy9DLENBQUM7QUFDRiw4QkFBOEIsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQzlDLDhCQUE4QixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxLQUFLLEVBQUU7RUFDOUQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQ3hCLE9BQU8sSUFBSTtFQUNYO0lBQ0UsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2pDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUN0QixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ2xCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO01BQzdCLE1BQU07S0FDUDtJQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0dBQ3RCO0VBQ0QsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0VBQ3RCLE9BQU87QUFDVCxDQUFDLENBQUM7O0FBRUYsOEJBQThCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLE1BQU0sRUFBRTtFQUNoRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztFQUMxRCxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDeEIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0VBQ3hCLE9BQU87QUFDVCxDQUFDLENBQUM7O0FBRUYsZ0NBQWdDLEdBQUcsU0FBUyxJQUFJLEVBQUU7RUFDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7RUFDcEIsSUFBSSxJQUFJLEVBQUU7SUFDUixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO01BQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztLQUM3QjtHQUNGO0NBQ0YsQ0FBQztBQUNGLGdDQUFnQyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDaEQsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLEtBQUssRUFBRTtFQUNoRSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7RUFDeEIsT0FBTyxJQUFJO0VBQ1g7SUFDRSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDakMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUN0QixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3RCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDbEIsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7TUFDN0IsTUFBTTtLQUNQO0FBQ0wsSUFBSSxRQUFRLEdBQUc7O01BRVQsS0FBSyxDQUFDO01BQ04sSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDN0IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxRQUFRLENBQUM7UUFDYixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDakIsUUFBUSxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNqQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUMxQixNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUN2QixLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxFQUFFLEVBQUUsSUFBSTtRQUN4QztVQUNFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztVQUNsQixNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztVQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1VBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO09BQ3JCLE1BQU07UUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ25CO01BQ0QsTUFBTTtNQUNOLEtBQUssQ0FBQztRQUNKLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsTUFBTTtNQUNSO1FBQ0UsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNyQjtJQUNELEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztHQUN0QjtFQUNELEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztFQUN0QixPQUFPO0FBQ1QsQ0FBQyxDQUFDOztBQUVGLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxNQUFNLEVBQUU7RUFDbEUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGtDQUFrQyxDQUFDLENBQUM7RUFDNUQsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtJQUN2RCxNQUFNLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0QsS0FBSyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTztJQUMvQjtNQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDO01BQ3ZDO1FBQ0UsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUN0QjtLQUNGO0lBQ0QsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUN4QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDeEIsT0FBTztBQUNULENBQUMsQ0FBQzs7QUFFRiwwQkFBMEIsR0FBRyxTQUFTLElBQUksRUFBRTtFQUMxQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztFQUNuQixJQUFJLElBQUksRUFBRTtJQUNSLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7TUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQzNCO0dBQ0Y7Q0FDRixDQUFDO0FBQ0YsMEJBQTBCLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUMxQywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsS0FBSyxFQUFFO0VBQzFELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztFQUN4QixPQUFPLElBQUk7RUFDWDtJQUNFLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNqQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3RCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNsQixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtNQUM3QixNQUFNO0tBQ1A7QUFDTCxJQUFJLFFBQVEsR0FBRzs7TUFFVCxLQUFLLENBQUM7TUFDTixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7T0FDckMsTUFBTTtRQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDbkI7TUFDRCxNQUFNO01BQ04sS0FBSyxDQUFDO1FBQ0osS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQixNQUFNO01BQ1I7UUFDRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0dBQ3RCO0VBQ0QsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0VBQ3RCLE9BQU87QUFDVCxDQUFDLENBQUM7O0FBRUYsMEJBQTBCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLE1BQU0sRUFBRTtFQUM1RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUMsQ0FBQztFQUN0RCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO0lBQ3JELE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUN4QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDeEIsT0FBTztBQUNULENBQUMsQ0FBQzs7QUFFRiw0QkFBNEIsR0FBRyxTQUFTLElBQUksRUFBRTtFQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztFQUNwQixJQUFJLElBQUksRUFBRTtJQUNSLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7TUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0tBQzdCO0dBQ0Y7Q0FDRixDQUFDO0FBQ0YsNEJBQTRCLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUM1Qyw0QkFBNEIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsS0FBSyxFQUFFO0VBQzVELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztFQUN4QixPQUFPLElBQUk7RUFDWDtJQUNFLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNqQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3RCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNsQixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtNQUM3QixNQUFNO0tBQ1A7QUFDTCxJQUFJLFFBQVEsR0FBRzs7TUFFVCxLQUFLLENBQUM7TUFDTixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDMUIsTUFBTTtRQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDbkI7TUFDRCxNQUFNO01BQ04sS0FBSyxDQUFDO1FBQ0osS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQixNQUFNO01BQ1I7UUFDRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0dBQ3RCO0VBQ0QsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0VBQ3RCLE9BQU87QUFDVCxDQUFDLENBQUM7O0FBRUYsNEJBQTRCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLE1BQU0sRUFBRTtFQUM5RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsOEJBQThCLENBQUMsQ0FBQztFQUN4RCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO0lBQ3ZELE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUN4QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDeEIsT0FBTztBQUNULENBQUMsQ0FBQzs7QUFFRix3QkFBd0IsR0FBRyxTQUFTLElBQUksRUFBRTtFQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztFQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztFQUN4QixJQUFJLElBQUksRUFBRTtJQUNSLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7TUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ3ZCO0lBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtNQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDckM7R0FDRjtDQUNGLENBQUM7QUFDRix3QkFBd0IsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxLQUFLLEVBQUU7RUFDeEQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQ3hCLE9BQU8sSUFBSTtFQUNYO0lBQ0UsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2pDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUN0QixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ2xCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO01BQzdCLE1BQU07S0FDUDtBQUNMLElBQUksUUFBUSxHQUFHOztNQUVULEtBQUssQ0FBQztNQUNOLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUN2QixNQUFNO1FBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUNuQjtNQUNELE1BQU07TUFDTixLQUFLLENBQUM7TUFDTixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUM7T0FDN0MsTUFBTTtRQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDbkI7TUFDRCxNQUFNO01BQ047UUFDRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0dBQ3RCO0VBQ0QsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0VBQ3RCLE9BQU87QUFDVCxDQUFDLENBQUM7O0FBRUYsd0JBQXdCLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLE1BQU0sRUFBRTtFQUMxRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztFQUNwRCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO0lBQ2pELE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7SUFDL0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQ3hCO0VBQ0QsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0VBQ3hCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUN4QixPQUFPO0FBQ1QsQ0FBQyxDQUFDOztBQUVGLDBCQUEwQixHQUFHLFNBQVMsSUFBSSxFQUFFO0VBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0VBQ3BCLElBQUksSUFBSSxFQUFFO0lBQ1IsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtNQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDN0I7R0FDRjtDQUNGLENBQUM7QUFDRiwwQkFBMEIsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQzFDLDBCQUEwQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxLQUFLLEVBQUU7RUFDMUQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQ3hCLE9BQU8sSUFBSTtFQUNYO0lBQ0UsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2pDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUN0QixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ2xCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO01BQzdCLE1BQU07S0FDUDtBQUNMLElBQUksUUFBUSxHQUFHOztNQUVULEtBQUssQ0FBQztNQUNOLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUMxQixNQUFNO1FBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUNuQjtNQUNELE1BQU07TUFDTixLQUFLLENBQUM7UUFDSixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xCLE1BQU07TUFDUjtRQUNFLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDckI7SUFDRCxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7R0FDdEI7RUFDRCxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7RUFDdEIsT0FBTztBQUNULENBQUMsQ0FBQzs7QUFFRiwwQkFBMEIsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsTUFBTSxFQUFFO0VBQzVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0VBQ3RELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7SUFDdkQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQ3hCO0VBQ0QsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0VBQ3hCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUN4QixPQUFPO0FBQ1QsQ0FBQyxDQUFDOztBQUVGLGtCQUFrQixHQUFHLFNBQVMsS0FBSyxFQUFFLE1BQU0sRUFBRTtJQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQztJQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztDQUNsQixDQUFDO0FBQ0Ysa0JBQWtCLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNsQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFNBQVMsUUFBUSxFQUFFO0VBQzdELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUNqQyxJQUFJLENBQUMsUUFBUSxFQUFFO0lBQ2IsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztHQUNqQztBQUNILENBQUMsQ0FBQzs7QUFFRixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxRQUFRLEVBQUU7RUFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQ25GLElBQUksSUFBSSxHQUFHLElBQUksOEJBQThCLEVBQUUsQ0FBQztFQUNoRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQzlCLElBQUksUUFBUSxFQUFFO0lBQ1osSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXO01BQ2hELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztNQUNsQixJQUFJO1FBQ0YsTUFBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO09BQ25DLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLEdBQUcsQ0FBQyxDQUFDO09BQ1o7TUFDRCxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbEIsQ0FBQyxDQUFDO0dBQ0osTUFBTTtJQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUMzQztBQUNILENBQUMsQ0FBQzs7QUFFRixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsV0FBVztFQUMxRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7RUFDeEMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztFQUN0QixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0VBQ3RCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7RUFDeEIsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7SUFDekMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMzQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzVCLE1BQU0sQ0FBQyxDQUFDO0dBQ1Q7RUFDRCxJQUFJLE1BQU0sR0FBRyxJQUFJLGdDQUFnQyxFQUFFLENBQUM7RUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDOztFQUU1QixJQUFJLElBQUksS0FBSyxNQUFNLENBQUMsT0FBTyxFQUFFO0lBQzNCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQztHQUN2QjtFQUNELE1BQU0scUNBQXFDLENBQUM7Q0FDN0MsQ0FBQztBQUNGLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxNQUFNLEVBQUUsUUFBUSxFQUFFO0VBQ2pFLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQ3JDLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDYixPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUM3QjtBQUNILENBQUMsQ0FBQzs7QUFFRixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFNBQVMsTUFBTSxFQUFFLFFBQVEsRUFBRTtFQUN0RSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDL0UsSUFBSSxJQUFJLEdBQUcsSUFBSSwwQkFBMEIsRUFBRSxDQUFDO0VBQzVDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0VBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7RUFDOUIsSUFBSSxRQUFRLEVBQUU7SUFDWixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFdBQVc7TUFDaEQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ2xCLElBQUk7UUFDRixNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO09BQy9CLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLEdBQUcsQ0FBQyxDQUFDO09BQ1o7TUFDRCxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbEIsQ0FBQyxDQUFDO0dBQ0osTUFBTTtJQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUMzQztBQUNILENBQUMsQ0FBQzs7QUFFRixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFdBQVc7RUFDdEQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0VBQ3hDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7RUFDdEIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztFQUN0QixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0VBQ3hCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFO0lBQ3pDLElBQUksQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDM0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM1QixNQUFNLENBQUMsQ0FBQztHQUNUO0VBQ0QsSUFBSSxNQUFNLEdBQUcsSUFBSSw0QkFBNEIsRUFBRSxDQUFDO0VBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQzs7RUFFNUIsSUFBSSxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUM7R0FDdkI7RUFDRCxNQUFNLGlDQUFpQyxDQUFDO0NBQ3pDLENBQUM7QUFDRixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7RUFDMUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQzlDLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDYixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztHQUMzQjtBQUNILENBQUMsQ0FBQzs7QUFFRixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFNBQVMsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7RUFDL0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQzdFLElBQUksSUFBSSxHQUFHLElBQUksd0JBQXdCLEVBQUUsQ0FBQztFQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztFQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztFQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQzlCLElBQUksUUFBUSxFQUFFO0lBQ1osSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXO01BQ2hELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztNQUNsQixJQUFJO1FBQ0YsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztPQUM3QixDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxHQUFHLENBQUMsQ0FBQztPQUNaO01BQ0QsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2xCLENBQUMsQ0FBQztHQUNKLE1BQU07SUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDM0M7QUFDSCxDQUFDLENBQUM7O0FBRUYsa0JBQWtCLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxXQUFXO0VBQ3BELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztFQUN4QyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0VBQ3RCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7RUFDdEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztFQUN4QixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRTtJQUN6QyxJQUFJLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQzNDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDNUIsTUFBTSxDQUFDLENBQUM7R0FDVDtFQUNELElBQUksTUFBTSxHQUFHLElBQUksMEJBQTBCLEVBQUUsQ0FBQztFQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7O0VBRTVCLElBQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDM0IsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDO0dBQ3ZCO0VBQ0QsTUFBTSwrQkFBK0IsQ0FBQztDQUN2QyxDQUFDOzs7Ozs7Ozs7Ozs7O0FDN2VGLEVBQUU7QUFDRiwyQ0FBMkM7QUFDM0MsRUFBRTtBQUNGLG1FQUFtRTtBQUNuRSxFQUFFO0FBQ0Y7O0FBRUEsS0FBSyxHQUFHLFNBQVMsSUFBSSxFQUFFO0VBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0VBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0VBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0VBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0VBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0VBQ2xCLElBQUksSUFBSSxFQUFFO0lBQ1IsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtNQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7S0FDM0I7SUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO01BQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUN6QjtJQUNELElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7TUFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQ2pDO0lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtNQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDL0I7SUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO01BQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUMzQjtJQUNELElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7TUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0tBQ3pCO0dBQ0Y7Q0FDRixDQUFDO0FBQ0YsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDckIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxLQUFLLEVBQUU7RUFDckMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQ3hCLE9BQU8sSUFBSTtFQUNYO0lBQ0UsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2pDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUN0QixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ2xCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO01BQzdCLE1BQU07S0FDUDtBQUNMLElBQUksUUFBUSxHQUFHOztNQUVULEtBQUssQ0FBQztNQUNOLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztPQUNyQyxNQUFNO1FBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUNuQjtNQUNELE1BQU07TUFDTixLQUFLLENBQUM7TUFDTixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUM7T0FDdkMsTUFBTTtRQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDbkI7TUFDRCxNQUFNO01BQ04sS0FBSyxDQUFDO01BQ04sSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDO09BQzNDLE1BQU07UUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ25CO01BQ0QsTUFBTTtNQUNOLEtBQUssQ0FBQztNQUNOLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQztPQUMxQyxNQUFNO1FBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUNuQjtNQUNELE1BQU07TUFDTixLQUFLLENBQUM7TUFDTixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDekIsTUFBTTtRQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDbkI7TUFDRCxNQUFNO01BQ04sS0FBSyxDQUFDO01BQ04sSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDN0IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxPQUFPLENBQUM7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsT0FBTyxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNoQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUN4QixNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN0QixLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxFQUFFLEVBQUUsR0FBRztRQUNyQztVQUNFLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztVQUNqQixLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztVQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1VBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO09BQ3JCLE1BQU07UUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ25CO01BQ0QsTUFBTTtNQUNOO1FBQ0UsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNyQjtJQUNELEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztHQUN0QjtFQUNELEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztFQUN0QixPQUFPO0FBQ1QsQ0FBQyxDQUFDOztBQUVGLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsTUFBTSxFQUFFO0VBQ3ZDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO0lBQ3JELE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7SUFDbkQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQ3hCO0VBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtJQUMzRCxNQUFNLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7R0FDeEI7RUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO0lBQ3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7SUFDckQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQ3hCO0VBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtJQUNuRCxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0QsS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSztJQUM1QjtNQUNFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO01BQ3BDO1FBQ0UsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUNyQjtLQUNGO0lBQ0QsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUN4QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDeEIsT0FBTztBQUNULENBQUMsQ0FBQzs7QUFFRixPQUFPLEdBQUcsU0FBUyxJQUFJLEVBQUU7RUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7RUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7RUFDdkIsSUFBSSxJQUFJLEVBQUU7SUFDUixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO01BQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztLQUMvQjtJQUNELElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7TUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0tBQ25DO0dBQ0Y7Q0FDRixDQUFDO0FBQ0YsT0FBTyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDdkIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxLQUFLLEVBQUU7RUFDdkMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0VBQ3hCLE9BQU8sSUFBSTtFQUNYO0lBQ0UsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ2pDLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUN0QixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQ2xCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO01BQzdCLE1BQU07S0FDUDtBQUNMLElBQUksUUFBUSxHQUFHOztNQUVULEtBQUssQ0FBQztNQUNOLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztPQUN2QyxNQUFNO1FBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUNuQjtNQUNELE1BQU07TUFDTixLQUFLLENBQUM7TUFDTixJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUM7T0FDNUMsTUFBTTtRQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDbkI7TUFDRCxNQUFNO01BQ047UUFDRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0dBQ3RCO0VBQ0QsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0VBQ3RCLE9BQU87QUFDVCxDQUFDLENBQUM7O0FBRUYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxNQUFNLEVBQUU7RUFDekMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0VBQ25DLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7SUFDekQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0dBQ3hCO0VBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtJQUM3RCxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7R0FDeEI7RUFDRCxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDeEIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0VBQ3hCLE9BQU87QUFDVCxDQUFDLENBQUM7O0FBRUYsS0FBSyxHQUFHLFNBQVMsSUFBSSxFQUFFO0VBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0VBQ3JCLElBQUksSUFBSSxFQUFFO0lBQ1IsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtNQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDL0I7R0FDRjtDQUNGLENBQUM7QUFDRixLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNyQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLEtBQUssRUFBRTtFQUNyQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7RUFDeEIsT0FBTyxJQUFJO0VBQ1g7SUFDRSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDakMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUN0QixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3RCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDbEIsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7TUFDN0IsTUFBTTtLQUNQO0FBQ0wsSUFBSSxRQUFRLEdBQUc7O01BRVQsS0FBSyxDQUFDO01BQ04sSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDO09BQzFDLE1BQU07UUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQ25CO01BQ0QsTUFBTTtNQUNOLEtBQUssQ0FBQztRQUNKLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsTUFBTTtNQUNSO1FBQ0UsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNyQjtJQUNELEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztHQUN0QjtFQUNELEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztFQUN0QixPQUFPO0FBQ1QsQ0FBQyxDQUFDOztBQUVGLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsTUFBTSxFQUFFO0VBQ3ZDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNqQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO0lBQ3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUN4QjtFQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUN4QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDeEIsT0FBTztBQUNULENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7O0FDdFJGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7O0FBRUgsb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0dBRUc7QUFDSCxJQUFJLE1BQU0sR0FBRztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxPQUFPLEVBQUUsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRUksSUFBSSxFQUFFO1FBQ0YsTUFBTSxHQUFHLENBQUM7UUFDVixNQUFNLEdBQUcsQ0FBQztRQUNWLE1BQU0sR0FBRyxDQUFDO1FBQ1YsTUFBTSxHQUFHLENBQUM7UUFDVixLQUFLLEdBQUcsQ0FBQztRQUNULFFBQVEsR0FBRyxDQUFDO1FBQ1osS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLEdBQUcsQ0FBQztRQUNULEtBQUssR0FBRyxFQUFFO1FBQ1YsUUFBUSxHQUFHLEVBQUU7UUFDYixNQUFNLEdBQUcsRUFBRTtRQUNYLFFBQVEsR0FBRyxFQUFFO1FBQ2IsS0FBSyxHQUFHLEVBQUU7UUFDVixLQUFLLEdBQUcsRUFBRTtRQUNWLE1BQU0sR0FBRyxFQUFFO1FBQ1gsTUFBTSxHQUFHLEVBQUU7UUFDWCxPQUFPLEdBQUcsRUFBRTtBQUNwQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxXQUFXLEVBQUU7UUFDVCxNQUFNLEdBQUcsQ0FBQztRQUNWLE9BQU8sR0FBRyxDQUFDO1FBQ1gsV0FBVyxHQUFHLENBQUM7UUFDZixRQUFRLEdBQUcsQ0FBQztBQUNwQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxZQUFZLEVBQUUsU0FBUyxHQUFHLEVBQUU7UUFDeEIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUU7WUFDZixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZCLE1BQU0sRUFBRSxDQUFDO2FBQ1o7U0FDSjtRQUNELE9BQU8sTUFBTSxDQUFDO0FBQ3RCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxRQUFRLEVBQUUsU0FBUyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFO01BQ3RELFNBQVMsQ0FBQyxHQUFHLEVBQUU7TUFDZixDQUFDLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztNQUN6QyxXQUFXLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7TUFDaEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztLQUN6QztBQUNMLENBQUMsQ0FBQzs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLFVBQVUsR0FBRyxTQUFTLE9BQU8sRUFBRTtJQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUMxQixDQUFDO0FBQ0YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7SUFDaEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3hCLENBQUMsQ0FBQzs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7R0FFRztBQUNILE1BQU0sQ0FBQyx5QkFBeUIsR0FBRztJQUMvQixTQUFTLEdBQUcsQ0FBQztJQUNiLGdCQUFnQixHQUFHLENBQUM7SUFDcEIsc0JBQXNCLEdBQUcsQ0FBQztJQUMxQixtQkFBbUIsR0FBRyxDQUFDO0lBQ3ZCLGlCQUFpQixHQUFHLENBQUM7SUFDckIsZ0JBQWdCLEdBQUcsQ0FBQztJQUNwQixnQkFBZ0IsR0FBRyxDQUFDO0lBQ3BCLGdCQUFnQixHQUFHLENBQUM7SUFDcEIsbUJBQW1CLEdBQUcsQ0FBQztJQUN2QixrQkFBa0IsR0FBRyxDQUFDO0lBQ3RCLHlCQUF5QixHQUFHLEVBQUU7QUFDbEMsQ0FBQyxDQUFDOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7RUFFRTtBQUNGLE1BQU0sQ0FBQyxxQkFBcUIsR0FBRyxTQUFTLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztDQUNuRCxDQUFDO0FBQ0YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDOztBQUUxRjtBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxLQUFLLEVBQUU7SUFDMUQsT0FBTyxDQUFDLEVBQUU7QUFDZCxRQUFRLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQzs7UUFFakMsSUFBSSxHQUFHLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQy9CLE1BQU07QUFDbEIsU0FBUzs7QUFFVCxRQUFRLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7O1FBRWxCLFFBQVEsR0FBRztZQUNQLEtBQUssQ0FBQztnQkFDRixJQUFJLEdBQUcsQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2pDLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7b0JBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztpQkFDNUIsTUFBTTtvQkFDSCxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQy9CO2dCQUNELE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsSUFBSSxHQUFHLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUM5QixHQUFHLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7aUJBQ3pCLE1BQU07b0JBQ0gsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMvQjtnQkFDRCxNQUFNO1dBQ1g7Z0JBQ0ssR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixNQUFNO0FBQ3RCLFNBQVM7O1FBRUQsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzdCLEtBQUs7O0lBRUQsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzFCLENBQUMsQ0FBQzs7QUFFRjtBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxNQUFNLEVBQUU7QUFDaEUsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQzs7SUFFakQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDL0IsS0FBSzs7SUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDWCxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDL0IsS0FBSzs7SUFFRCxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzVCLENBQUMsQ0FBQzs7QUFFRjtBQUNBO0FBQ0E7O0dBRUc7QUFDSCxNQUFNLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxXQUFXO0lBQ3hELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztBQUNyQixDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsYUFBYSxHQUFHLFNBQVMsR0FBRyxFQUFFLE9BQU8sRUFBRTtJQUM3RCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHO0FBQ2pDO0FBQ0E7QUFDQTs7SUFFSSx1QkFBdUIsRUFBRSxXQUFXO1FBQ2hDLElBQUksRUFBRSxPQUFPLElBQUksY0FBYyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUc7UUFDbkQsSUFBSSxFQUFFLE9BQU8sSUFBSSxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRztBQUMxRSxRQUFRLElBQUksRUFBRSxPQUFPLElBQUksYUFBYSxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUc7O1FBRXJFLE1BQU0sbUNBQW1DLENBQUM7QUFDbEQsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztJQUVJLEtBQUssRUFBRSxTQUFTLEtBQUssRUFBRSxRQUFRLEVBQUU7UUFDN0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLEVBQUU7WUFDbkUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ2pDLFNBQVM7O0FBRVQsUUFBUSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQzs7UUFFMUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdEQsU0FBUzs7QUFFVCxRQUFRLElBQUksUUFBUSxFQUFFO0FBQ3RCOztZQUVZLElBQUksQ0FBQyxrQkFBa0I7ZUFDcEIsV0FBVztnQkFDVixJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUM7Z0JBQzlCLE9BQU8sV0FBVztrQkFDaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBRTtvQkFDOUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQ3RDLGNBQWMsRUFBRSxDQUFDO21CQUNsQjtpQkFDRixDQUFDO2VBQ0gsRUFBRSxDQUFDLENBQUM7QUFDbkIsU0FBUzs7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QixJQUFJLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDbkIsT0FBTztBQUNuQixTQUFTOztRQUVELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLEVBQUU7WUFDdEIsTUFBTSwyQ0FBMkMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ2hGLFNBQVM7O1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBRTtZQUNwQixNQUFNLHdDQUF3QyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDekUsU0FBUzs7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ3RCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRUksU0FBUyxFQUFFLFNBQVMsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFO1FBQ3JELElBQUksT0FBTyxNQUFNLEtBQUssV0FBVztZQUM3QixPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssV0FBVyxFQUFFO1lBQ3hDLE1BQU0sNkRBQTZELENBQUM7QUFDaEYsU0FBUzs7QUFFVCxRQUFRLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQzs7UUFFM0IsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLEtBQUs7WUFDWixXQUFXLEVBQUUsa0JBQWtCO1lBQy9CLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFVBQVUsRUFBRTtnQkFDUixhQUFhLEdBQUcsU0FBUyxZQUFZLEVBQUU7b0JBQ25DLGVBQWUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzVDLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3JDLE9BQU8sS0FBSyxDQUFDO2lCQUNoQjthQUNKO1lBQ0QsT0FBTyxFQUFFLE1BQU07WUFDZixPQUFPLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7QUFDakQsU0FBUyxDQUFDLENBQUM7O1FBRUgsT0FBTyxLQUFLLENBQUM7QUFDckIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztJQUVJLGFBQWEsRUFBRSxTQUFTLEdBQUcsRUFBRTtRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7QUFDdEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRUksTUFBTSxFQUFFLFdBQVc7UUFDZixPQUFPLElBQUksQ0FBQztBQUNwQixLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLElBQUksSUFBSSxFQUFFLFdBQVcsRUFBRTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxLQUFLLEVBQUUsV0FBVyxFQUFFO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxJQUFJLEVBQUUsU0FBUyxHQUFHLEVBQUU7QUFDeEIsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7O1FBRWxDLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNiLE9BQU8sRUFBRSxDQUFDO0FBQ3RCLFNBQVM7O0FBRVQsUUFBUSxJQUFJLElBQUksR0FBRyxHQUFHLENBQUM7O1FBRWYsSUFBSSxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ2IsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUN6QixTQUFTOztRQUVELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDeEQsUUFBUSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztBQUMxQjs7UUFFUSxPQUFPLEdBQUcsQ0FBQztBQUNuQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0lBRUksT0FBTyxFQUFFLFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQzdCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxLQUFLLEVBQUUsU0FBUyxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7QUFDNUIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRUksYUFBYSxFQUFFLFdBQVc7UUFDdEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQzdCLEtBQUs7O0FBRUwsQ0FBQyxDQUFDO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLG1CQUFtQixHQUFHLFNBQVMsR0FBRyxFQUFFO0lBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEdBQUc7SUFDbkMsT0FBTyxFQUFFLFNBQVMsR0FBRyxFQUFFO01BQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO01BQ2YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7TUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7TUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7TUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7TUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7TUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDdkIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRUksS0FBSyxFQUFFLFNBQVMsS0FBSyxFQUFFLFFBQVEsRUFBRTtNQUMvQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDdEIsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTs7UUFFakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFdBQVc7VUFDOUIsSUFBSSxjQUFjLEdBQUcsUUFBUSxDQUFDO1VBQzlCLE9BQU8sU0FBUyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QixjQUFjLEVBQUUsQ0FBQztXQUNsQixDQUFDO1NBQ0gsRUFBRSxFQUFFLENBQUM7QUFDZCxPQUFPLE1BQU07O1FBRUwsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7VUFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO1VBQ2xCLEVBQUUsR0FBRyxRQUFRO1NBQ2QsQ0FBQyxDQUFDO09BQ0o7QUFDUCxLQUFLOztJQUVELFFBQVEsRUFBRSxXQUFXO09BQ2xCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztBQUN2QixPQUFPLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3pDOztVQUVVLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxFQUFFO2FBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxXQUFXO2VBQzlCLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7ZUFDN0IsT0FBTyxTQUFTLEdBQUcsRUFBRTtrQkFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztrQkFDeEIsY0FBYyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7Y0FDSCxFQUFFLEVBQUUsQ0FBQztXQUNSLENBQUMsQ0FBQztVQUNILElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3pCO0FBQ1IsS0FBSzs7SUFFRCxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUU7TUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsS0FBSzs7SUFFRCxXQUFXLEVBQUUsU0FBUyxHQUFHLEVBQUU7TUFDekIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUNsQztBQUNQLEtBQUs7O0lBRUQsU0FBUyxFQUFFLFNBQVMsR0FBRyxFQUFFO01BQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7TUFDekQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0lBRUksYUFBYSxFQUFFLFNBQVMsR0FBRyxFQUFFO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUN0QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxNQUFNLEVBQUUsV0FBVztRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztBQUN6RSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLElBQUksSUFBSSxFQUFFLFdBQVc7O01BRWYsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQy9ELE9BQU87QUFDZixPQUFPOztNQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RELEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0lBRUksS0FBSyxFQUFFLFdBQVc7TUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztJQUVJLElBQUksRUFBRSxTQUFTLEdBQUcsRUFBRTtBQUN4QixRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzs7UUFFbEMsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ2IsT0FBTyxFQUFFLENBQUM7QUFDdEIsU0FBUzs7QUFFVCxRQUFRLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQzs7UUFFZixJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7WUFDYixJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLFNBQVM7O1FBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN4RCxRQUFRLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0FBQzFCOztRQUVRLE9BQU8sR0FBRyxDQUFDO0FBQ25CLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxPQUFPLEVBQUUsV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDN0IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztJQUVJLEtBQUssRUFBRSxTQUFTLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUM1QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFSSxhQUFhLEVBQUUsV0FBVztRQUN0QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDN0IsS0FBSzs7QUFFTCxDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLFFBQVEsR0FBRyxTQUFTLFNBQVMsRUFBRTtJQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUMvQixDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDOztBQUVoRDtBQUNBO0FBQ0E7O0dBRUc7QUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzVDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM1QyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDNUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQzVDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUM1QyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDL0MsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQy9DLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMvQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDNUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0dBRUc7QUFDSCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQzs7QUFFN0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0lBRUksWUFBWSxFQUFFLFdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQzlCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRUksaUJBQWlCLEVBQUUsU0FBUyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRTtRQUNsRCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUN6QixRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDOztRQUVmLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRztZQUMxQyxJQUFJLEdBQUcsR0FBRyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzdDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0lBRUksZUFBZSxFQUFFLFdBQVc7QUFDaEMsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDOztRQUU1QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDdEMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFNUIsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7O1FBRTVDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxNQUFNO0FBQ047QUFDQTtB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QUM5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUU5QyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxVQUFVLElBQUksRUFBRTtJQUMvQixRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3ZFLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvL1xyXG4vLyBBdXRvZ2VuZXJhdGVkIGJ5IFRocmlmdCBDb21waWxlciAoMC45LjIpXHJcbi8vXHJcbi8vIERPIE5PVCBFRElUIFVOTEVTUyBZT1UgQVJFIFNVUkUgVEhBVCBZT1UgS05PVyBXSEFUIFlPVSBBUkUgRE9JTkdcclxuLy9cclxuXHJcblxyXG4vL0hFTFBFUiBGVU5DVElPTlMgQU5EIFNUUlVDVFVSRVNcclxuXHJcblRVc2VyU2VydmljZV9maW5kRmFtaWxpZXNfYXJncyA9IGZ1bmN0aW9uKGFyZ3MpIHtcclxufTtcclxuVFVzZXJTZXJ2aWNlX2ZpbmRGYW1pbGllc19hcmdzLnByb3RvdHlwZSA9IHt9O1xyXG5UVXNlclNlcnZpY2VfZmluZEZhbWlsaWVzX2FyZ3MucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihpbnB1dCkge1xyXG4gIGlucHV0LnJlYWRTdHJ1Y3RCZWdpbigpO1xyXG4gIHdoaWxlICh0cnVlKVxyXG4gIHtcclxuICAgIHZhciByZXQgPSBpbnB1dC5yZWFkRmllbGRCZWdpbigpO1xyXG4gICAgdmFyIGZuYW1lID0gcmV0LmZuYW1lO1xyXG4gICAgdmFyIGZ0eXBlID0gcmV0LmZ0eXBlO1xyXG4gICAgdmFyIGZpZCA9IHJldC5maWQ7XHJcbiAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RPUCkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgaW5wdXQucmVhZEZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlucHV0LnJlYWRTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VfZmluZEZhbWlsaWVzX2FyZ3MucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24ob3V0cHV0KSB7XHJcbiAgb3V0cHV0LndyaXRlU3RydWN0QmVnaW4oJ1RVc2VyU2VydmljZV9maW5kRmFtaWxpZXNfYXJncycpO1xyXG4gIG91dHB1dC53cml0ZUZpZWxkU3RvcCgpO1xyXG4gIG91dHB1dC53cml0ZVN0cnVjdEVuZCgpO1xyXG4gIHJldHVybjtcclxufTtcclxuXHJcblRVc2VyU2VydmljZV9maW5kRmFtaWxpZXNfcmVzdWx0ID0gZnVuY3Rpb24oYXJncykge1xyXG4gIHRoaXMuc3VjY2VzcyA9IG51bGw7XHJcbiAgaWYgKGFyZ3MpIHtcclxuICAgIGlmIChhcmdzLnN1Y2Nlc3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnN1Y2Nlc3MgPSBhcmdzLnN1Y2Nlc3M7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5UVXNlclNlcnZpY2VfZmluZEZhbWlsaWVzX3Jlc3VsdC5wcm90b3R5cGUgPSB7fTtcclxuVFVzZXJTZXJ2aWNlX2ZpbmRGYW1pbGllc19yZXN1bHQucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihpbnB1dCkge1xyXG4gIGlucHV0LnJlYWRTdHJ1Y3RCZWdpbigpO1xyXG4gIHdoaWxlICh0cnVlKVxyXG4gIHtcclxuICAgIHZhciByZXQgPSBpbnB1dC5yZWFkRmllbGRCZWdpbigpO1xyXG4gICAgdmFyIGZuYW1lID0gcmV0LmZuYW1lO1xyXG4gICAgdmFyIGZ0eXBlID0gcmV0LmZ0eXBlO1xyXG4gICAgdmFyIGZpZCA9IHJldC5maWQ7XHJcbiAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RPUCkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHN3aXRjaCAoZmlkKVxyXG4gICAge1xyXG4gICAgICBjYXNlIDA6XHJcbiAgICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5MSVNUKSB7XHJcbiAgICAgICAgdmFyIF9zaXplOCA9IDA7XHJcbiAgICAgICAgdmFyIF9ydG1wMzEyO1xyXG4gICAgICAgIHRoaXMuc3VjY2VzcyA9IFtdO1xyXG4gICAgICAgIHZhciBfZXR5cGUxMSA9IDA7XHJcbiAgICAgICAgX3J0bXAzMTIgPSBpbnB1dC5yZWFkTGlzdEJlZ2luKCk7XHJcbiAgICAgICAgX2V0eXBlMTEgPSBfcnRtcDMxMi5ldHlwZTtcclxuICAgICAgICBfc2l6ZTggPSBfcnRtcDMxMi5zaXplO1xyXG4gICAgICAgIGZvciAodmFyIF9pMTMgPSAwOyBfaTEzIDwgX3NpemU4OyArK19pMTMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdmFyIGVsZW0xNCA9IG51bGw7XHJcbiAgICAgICAgICBlbGVtMTQgPSBuZXcgVEZhbWlseSgpO1xyXG4gICAgICAgICAgZWxlbTE0LnJlYWQoaW5wdXQpO1xyXG4gICAgICAgICAgdGhpcy5zdWNjZXNzLnB1c2goZWxlbTE0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5wdXQucmVhZExpc3RFbmQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaW5wdXQucmVhZEZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlucHV0LnJlYWRTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VfZmluZEZhbWlsaWVzX3Jlc3VsdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVFVzZXJTZXJ2aWNlX2ZpbmRGYW1pbGllc19yZXN1bHQnKTtcclxuICBpZiAodGhpcy5zdWNjZXNzICE9PSBudWxsICYmIHRoaXMuc3VjY2VzcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEJlZ2luKCdzdWNjZXNzJywgVGhyaWZ0LlR5cGUuTElTVCwgMCk7XHJcbiAgICBvdXRwdXQud3JpdGVMaXN0QmVnaW4oVGhyaWZ0LlR5cGUuU1RSVUNULCB0aGlzLnN1Y2Nlc3MubGVuZ3RoKTtcclxuICAgIGZvciAodmFyIGl0ZXIxNSBpbiB0aGlzLnN1Y2Nlc3MpXHJcbiAgICB7XHJcbiAgICAgIGlmICh0aGlzLnN1Y2Nlc3MuaGFzT3duUHJvcGVydHkoaXRlcjE1KSlcclxuICAgICAge1xyXG4gICAgICAgIGl0ZXIxNSA9IHRoaXMuc3VjY2Vzc1tpdGVyMTVdO1xyXG4gICAgICAgIGl0ZXIxNS53cml0ZShvdXRwdXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBvdXRwdXQud3JpdGVMaXN0RW5kKCk7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEVuZCgpO1xyXG4gIH1cclxuICBvdXRwdXQud3JpdGVGaWVsZFN0b3AoKTtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VfZmluZFVzZXJfYXJncyA9IGZ1bmN0aW9uKGFyZ3MpIHtcclxuICB0aGlzLnVzZXJJZCA9IG51bGw7XHJcbiAgaWYgKGFyZ3MpIHtcclxuICAgIGlmIChhcmdzLnVzZXJJZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMudXNlcklkID0gYXJncy51c2VySWQ7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5UVXNlclNlcnZpY2VfZmluZFVzZXJfYXJncy5wcm90b3R5cGUgPSB7fTtcclxuVFVzZXJTZXJ2aWNlX2ZpbmRVc2VyX2FyZ3MucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihpbnB1dCkge1xyXG4gIGlucHV0LnJlYWRTdHJ1Y3RCZWdpbigpO1xyXG4gIHdoaWxlICh0cnVlKVxyXG4gIHtcclxuICAgIHZhciByZXQgPSBpbnB1dC5yZWFkRmllbGRCZWdpbigpO1xyXG4gICAgdmFyIGZuYW1lID0gcmV0LmZuYW1lO1xyXG4gICAgdmFyIGZ0eXBlID0gcmV0LmZ0eXBlO1xyXG4gICAgdmFyIGZpZCA9IHJldC5maWQ7XHJcbiAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RPUCkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHN3aXRjaCAoZmlkKVxyXG4gICAge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5JMzIpIHtcclxuICAgICAgICB0aGlzLnVzZXJJZCA9IGlucHV0LnJlYWRJMzIoKS52YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaW5wdXQucmVhZEZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlucHV0LnJlYWRTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VfZmluZFVzZXJfYXJncy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVFVzZXJTZXJ2aWNlX2ZpbmRVc2VyX2FyZ3MnKTtcclxuICBpZiAodGhpcy51c2VySWQgIT09IG51bGwgJiYgdGhpcy51c2VySWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigndXNlcklkJywgVGhyaWZ0LlR5cGUuSTMyLCAxKTtcclxuICAgIG91dHB1dC53cml0ZUkzMih0aGlzLnVzZXJJZCk7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEVuZCgpO1xyXG4gIH1cclxuICBvdXRwdXQud3JpdGVGaWVsZFN0b3AoKTtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VfZmluZFVzZXJfcmVzdWx0ID0gZnVuY3Rpb24oYXJncykge1xyXG4gIHRoaXMuc3VjY2VzcyA9IG51bGw7XHJcbiAgaWYgKGFyZ3MpIHtcclxuICAgIGlmIChhcmdzLnN1Y2Nlc3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnN1Y2Nlc3MgPSBhcmdzLnN1Y2Nlc3M7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5UVXNlclNlcnZpY2VfZmluZFVzZXJfcmVzdWx0LnByb3RvdHlwZSA9IHt9O1xyXG5UVXNlclNlcnZpY2VfZmluZFVzZXJfcmVzdWx0LnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24oaW5wdXQpIHtcclxuICBpbnB1dC5yZWFkU3RydWN0QmVnaW4oKTtcclxuICB3aGlsZSAodHJ1ZSlcclxuICB7XHJcbiAgICB2YXIgcmV0ID0gaW5wdXQucmVhZEZpZWxkQmVnaW4oKTtcclxuICAgIHZhciBmbmFtZSA9IHJldC5mbmFtZTtcclxuICAgIHZhciBmdHlwZSA9IHJldC5mdHlwZTtcclxuICAgIHZhciBmaWQgPSByZXQuZmlkO1xyXG4gICAgaWYgKGZ0eXBlID09IFRocmlmdC5UeXBlLlNUT1ApIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKGZpZClcclxuICAgIHtcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RSVUNUKSB7XHJcbiAgICAgICAgdGhpcy5zdWNjZXNzID0gbmV3IFRVc2VyKCk7XHJcbiAgICAgICAgdGhpcy5zdWNjZXNzLnJlYWQoaW5wdXQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDA6XHJcbiAgICAgICAgaW5wdXQuc2tpcChmdHlwZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaW5wdXQuc2tpcChmdHlwZSk7XHJcbiAgICB9XHJcbiAgICBpbnB1dC5yZWFkRmllbGRFbmQoKTtcclxuICB9XHJcbiAgaW5wdXQucmVhZFN0cnVjdEVuZCgpO1xyXG4gIHJldHVybjtcclxufTtcclxuXHJcblRVc2VyU2VydmljZV9maW5kVXNlcl9yZXN1bHQucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24ob3V0cHV0KSB7XHJcbiAgb3V0cHV0LndyaXRlU3RydWN0QmVnaW4oJ1RVc2VyU2VydmljZV9maW5kVXNlcl9yZXN1bHQnKTtcclxuICBpZiAodGhpcy5zdWNjZXNzICE9PSBudWxsICYmIHRoaXMuc3VjY2VzcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEJlZ2luKCdzdWNjZXNzJywgVGhyaWZ0LlR5cGUuU1RSVUNULCAwKTtcclxuICAgIHRoaXMuc3VjY2Vzcy53cml0ZShvdXRwdXQpO1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTtcclxuICB9XHJcbiAgb3V0cHV0LndyaXRlRmllbGRTdG9wKCk7XHJcbiAgb3V0cHV0LndyaXRlU3RydWN0RW5kKCk7XHJcbiAgcmV0dXJuO1xyXG59O1xyXG5cclxuVFVzZXJTZXJ2aWNlX2NyZWF0ZV9hcmdzID0gZnVuY3Rpb24oYXJncykge1xyXG4gIHRoaXMudXNlciA9IG51bGw7XHJcbiAgdGhpcy5yYXdQYXNzd29yZCA9IG51bGw7XHJcbiAgaWYgKGFyZ3MpIHtcclxuICAgIGlmIChhcmdzLnVzZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnVzZXIgPSBhcmdzLnVzZXI7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJncy5yYXdQYXNzd29yZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMucmF3UGFzc3dvcmQgPSBhcmdzLnJhd1Bhc3N3b3JkO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuVFVzZXJTZXJ2aWNlX2NyZWF0ZV9hcmdzLnByb3RvdHlwZSA9IHt9O1xyXG5UVXNlclNlcnZpY2VfY3JlYXRlX2FyZ3MucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihpbnB1dCkge1xyXG4gIGlucHV0LnJlYWRTdHJ1Y3RCZWdpbigpO1xyXG4gIHdoaWxlICh0cnVlKVxyXG4gIHtcclxuICAgIHZhciByZXQgPSBpbnB1dC5yZWFkRmllbGRCZWdpbigpO1xyXG4gICAgdmFyIGZuYW1lID0gcmV0LmZuYW1lO1xyXG4gICAgdmFyIGZ0eXBlID0gcmV0LmZ0eXBlO1xyXG4gICAgdmFyIGZpZCA9IHJldC5maWQ7XHJcbiAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RPUCkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHN3aXRjaCAoZmlkKVxyXG4gICAge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5TVFJVQ1QpIHtcclxuICAgICAgICB0aGlzLnVzZXIgPSBuZXcgVFVzZXIoKTtcclxuICAgICAgICB0aGlzLnVzZXIucmVhZChpbnB1dCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaW5wdXQuc2tpcChmdHlwZSk7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgaWYgKGZ0eXBlID09IFRocmlmdC5UeXBlLlNUUklORykge1xyXG4gICAgICAgIHRoaXMucmF3UGFzc3dvcmQgPSBpbnB1dC5yZWFkU3RyaW5nKCkudmFsdWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaW5wdXQuc2tpcChmdHlwZSk7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaW5wdXQuc2tpcChmdHlwZSk7XHJcbiAgICB9XHJcbiAgICBpbnB1dC5yZWFkRmllbGRFbmQoKTtcclxuICB9XHJcbiAgaW5wdXQucmVhZFN0cnVjdEVuZCgpO1xyXG4gIHJldHVybjtcclxufTtcclxuXHJcblRVc2VyU2VydmljZV9jcmVhdGVfYXJncy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVFVzZXJTZXJ2aWNlX2NyZWF0ZV9hcmdzJyk7XHJcbiAgaWYgKHRoaXMudXNlciAhPT0gbnVsbCAmJiB0aGlzLnVzZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigndXNlcicsIFRocmlmdC5UeXBlLlNUUlVDVCwgMSk7XHJcbiAgICB0aGlzLnVzZXIud3JpdGUob3V0cHV0KTtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLnJhd1Bhc3N3b3JkICE9PSBudWxsICYmIHRoaXMucmF3UGFzc3dvcmQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigncmF3UGFzc3dvcmQnLCBUaHJpZnQuVHlwZS5TVFJJTkcsIDIpO1xyXG4gICAgb3V0cHV0LndyaXRlU3RyaW5nKHRoaXMucmF3UGFzc3dvcmQpO1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTtcclxuICB9XHJcbiAgb3V0cHV0LndyaXRlRmllbGRTdG9wKCk7XHJcbiAgb3V0cHV0LndyaXRlU3RydWN0RW5kKCk7XHJcbiAgcmV0dXJuO1xyXG59O1xyXG5cclxuVFVzZXJTZXJ2aWNlX2NyZWF0ZV9yZXN1bHQgPSBmdW5jdGlvbihhcmdzKSB7XHJcbiAgdGhpcy5zdWNjZXNzID0gbnVsbDtcclxuICBpZiAoYXJncykge1xyXG4gICAgaWYgKGFyZ3Muc3VjY2VzcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuc3VjY2VzcyA9IGFyZ3Muc3VjY2VzcztcclxuICAgIH1cclxuICB9XHJcbn07XHJcblRVc2VyU2VydmljZV9jcmVhdGVfcmVzdWx0LnByb3RvdHlwZSA9IHt9O1xyXG5UVXNlclNlcnZpY2VfY3JlYXRlX3Jlc3VsdC5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgaW5wdXQucmVhZFN0cnVjdEJlZ2luKCk7XHJcbiAgd2hpbGUgKHRydWUpXHJcbiAge1xyXG4gICAgdmFyIHJldCA9IGlucHV0LnJlYWRGaWVsZEJlZ2luKCk7XHJcbiAgICB2YXIgZm5hbWUgPSByZXQuZm5hbWU7XHJcbiAgICB2YXIgZnR5cGUgPSByZXQuZnR5cGU7XHJcbiAgICB2YXIgZmlkID0gcmV0LmZpZDtcclxuICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5TVE9QKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChmaWQpXHJcbiAgICB7XHJcbiAgICAgIGNhc2UgMDpcclxuICAgICAgaWYgKGZ0eXBlID09IFRocmlmdC5UeXBlLlNUUlVDVCkge1xyXG4gICAgICAgIHRoaXMuc3VjY2VzcyA9IG5ldyBUVXNlcigpO1xyXG4gICAgICAgIHRoaXMuc3VjY2Vzcy5yZWFkKGlucHV0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaW5wdXQucmVhZEZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlucHV0LnJlYWRTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VfY3JlYXRlX3Jlc3VsdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVFVzZXJTZXJ2aWNlX2NyZWF0ZV9yZXN1bHQnKTtcclxuICBpZiAodGhpcy5zdWNjZXNzICE9PSBudWxsICYmIHRoaXMuc3VjY2VzcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEJlZ2luKCdzdWNjZXNzJywgVGhyaWZ0LlR5cGUuU1RSVUNULCAwKTtcclxuICAgIHRoaXMuc3VjY2Vzcy53cml0ZShvdXRwdXQpO1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTtcclxuICB9XHJcbiAgb3V0cHV0LndyaXRlRmllbGRTdG9wKCk7XHJcbiAgb3V0cHV0LndyaXRlU3RydWN0RW5kKCk7XHJcbiAgcmV0dXJuO1xyXG59O1xyXG5cclxuVFVzZXJTZXJ2aWNlQ2xpZW50ID0gZnVuY3Rpb24oaW5wdXQsIG91dHB1dCkge1xyXG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG4gICAgdGhpcy5vdXRwdXQgPSAoIW91dHB1dCkgPyBpbnB1dCA6IG91dHB1dDtcclxuICAgIHRoaXMuc2VxaWQgPSAwO1xyXG59O1xyXG5UVXNlclNlcnZpY2VDbGllbnQucHJvdG90eXBlID0ge307XHJcblRVc2VyU2VydmljZUNsaWVudC5wcm90b3R5cGUuZmluZEZhbWlsaWVzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICB0aGlzLnNlbmRfZmluZEZhbWlsaWVzKGNhbGxiYWNrKTsgXHJcbiAgaWYgKCFjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIHRoaXMucmVjdl9maW5kRmFtaWxpZXMoKTtcclxuICB9XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VDbGllbnQucHJvdG90eXBlLnNlbmRfZmluZEZhbWlsaWVzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICB0aGlzLm91dHB1dC53cml0ZU1lc3NhZ2VCZWdpbignZmluZEZhbWlsaWVzJywgVGhyaWZ0Lk1lc3NhZ2VUeXBlLkNBTEwsIHRoaXMuc2VxaWQpO1xyXG4gIHZhciBhcmdzID0gbmV3IFRVc2VyU2VydmljZV9maW5kRmFtaWxpZXNfYXJncygpO1xyXG4gIGFyZ3Mud3JpdGUodGhpcy5vdXRwdXQpO1xyXG4gIHRoaXMub3V0cHV0LndyaXRlTWVzc2FnZUVuZCgpO1xyXG4gIGlmIChjYWxsYmFjaykge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdGhpcy5vdXRwdXQuZ2V0VHJhbnNwb3J0KCkuZmx1c2godHJ1ZSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBudWxsO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJlc3VsdCA9IHNlbGYucmVjdl9maW5kRmFtaWxpZXMoKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGU7XHJcbiAgICAgIH1cclxuICAgICAgY2FsbGJhY2socmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdGhpcy5vdXRwdXQuZ2V0VHJhbnNwb3J0KCkuZmx1c2goKTtcclxuICB9XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VDbGllbnQucHJvdG90eXBlLnJlY3ZfZmluZEZhbWlsaWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHJldCA9IHRoaXMuaW5wdXQucmVhZE1lc3NhZ2VCZWdpbigpO1xyXG4gIHZhciBmbmFtZSA9IHJldC5mbmFtZTtcclxuICB2YXIgbXR5cGUgPSByZXQubXR5cGU7XHJcbiAgdmFyIHJzZXFpZCA9IHJldC5yc2VxaWQ7XHJcbiAgaWYgKG10eXBlID09IFRocmlmdC5NZXNzYWdlVHlwZS5FWENFUFRJT04pIHtcclxuICAgIHZhciB4ID0gbmV3IFRocmlmdC5UQXBwbGljYXRpb25FeGNlcHRpb24oKTtcclxuICAgIHgucmVhZCh0aGlzLmlucHV0KTtcclxuICAgIHRoaXMuaW5wdXQucmVhZE1lc3NhZ2VFbmQoKTtcclxuICAgIHRocm93IHg7XHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBuZXcgVFVzZXJTZXJ2aWNlX2ZpbmRGYW1pbGllc19yZXN1bHQoKTtcclxuICByZXN1bHQucmVhZCh0aGlzLmlucHV0KTtcclxuICB0aGlzLmlucHV0LnJlYWRNZXNzYWdlRW5kKCk7XHJcblxyXG4gIGlmIChudWxsICE9PSByZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgcmV0dXJuIHJlc3VsdC5zdWNjZXNzO1xyXG4gIH1cclxuICB0aHJvdyAnZmluZEZhbWlsaWVzIGZhaWxlZDogdW5rbm93biByZXN1bHQnO1xyXG59O1xyXG5UVXNlclNlcnZpY2VDbGllbnQucHJvdG90eXBlLmZpbmRVc2VyID0gZnVuY3Rpb24odXNlcklkLCBjYWxsYmFjaykge1xyXG4gIHRoaXMuc2VuZF9maW5kVXNlcih1c2VySWQsIGNhbGxiYWNrKTsgXHJcbiAgaWYgKCFjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIHRoaXMucmVjdl9maW5kVXNlcigpO1xyXG4gIH1cclxufTtcclxuXHJcblRVc2VyU2VydmljZUNsaWVudC5wcm90b3R5cGUuc2VuZF9maW5kVXNlciA9IGZ1bmN0aW9uKHVzZXJJZCwgY2FsbGJhY2spIHtcclxuICB0aGlzLm91dHB1dC53cml0ZU1lc3NhZ2VCZWdpbignZmluZFVzZXInLCBUaHJpZnQuTWVzc2FnZVR5cGUuQ0FMTCwgdGhpcy5zZXFpZCk7XHJcbiAgdmFyIGFyZ3MgPSBuZXcgVFVzZXJTZXJ2aWNlX2ZpbmRVc2VyX2FyZ3MoKTtcclxuICBhcmdzLnVzZXJJZCA9IHVzZXJJZDtcclxuICBhcmdzLndyaXRlKHRoaXMub3V0cHV0KTtcclxuICB0aGlzLm91dHB1dC53cml0ZU1lc3NhZ2VFbmQoKTtcclxuICBpZiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHRoaXMub3V0cHV0LmdldFRyYW5zcG9ydCgpLmZsdXNoKHRydWUsIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXN1bHQgPSBzZWxmLnJlY3ZfZmluZFVzZXIoKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGU7XHJcbiAgICAgIH1cclxuICAgICAgY2FsbGJhY2socmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdGhpcy5vdXRwdXQuZ2V0VHJhbnNwb3J0KCkuZmx1c2goKTtcclxuICB9XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VDbGllbnQucHJvdG90eXBlLnJlY3ZfZmluZFVzZXIgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgcmV0ID0gdGhpcy5pbnB1dC5yZWFkTWVzc2FnZUJlZ2luKCk7XHJcbiAgdmFyIGZuYW1lID0gcmV0LmZuYW1lO1xyXG4gIHZhciBtdHlwZSA9IHJldC5tdHlwZTtcclxuICB2YXIgcnNlcWlkID0gcmV0LnJzZXFpZDtcclxuICBpZiAobXR5cGUgPT0gVGhyaWZ0Lk1lc3NhZ2VUeXBlLkVYQ0VQVElPTikge1xyXG4gICAgdmFyIHggPSBuZXcgVGhyaWZ0LlRBcHBsaWNhdGlvbkV4Y2VwdGlvbigpO1xyXG4gICAgeC5yZWFkKHRoaXMuaW5wdXQpO1xyXG4gICAgdGhpcy5pbnB1dC5yZWFkTWVzc2FnZUVuZCgpO1xyXG4gICAgdGhyb3cgeDtcclxuICB9XHJcbiAgdmFyIHJlc3VsdCA9IG5ldyBUVXNlclNlcnZpY2VfZmluZFVzZXJfcmVzdWx0KCk7XHJcbiAgcmVzdWx0LnJlYWQodGhpcy5pbnB1dCk7XHJcbiAgdGhpcy5pbnB1dC5yZWFkTWVzc2FnZUVuZCgpO1xyXG5cclxuICBpZiAobnVsbCAhPT0gcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgIHJldHVybiByZXN1bHQuc3VjY2VzcztcclxuICB9XHJcbiAgdGhyb3cgJ2ZpbmRVc2VyIGZhaWxlZDogdW5rbm93biByZXN1bHQnO1xyXG59O1xyXG5UVXNlclNlcnZpY2VDbGllbnQucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKHVzZXIsIHJhd1Bhc3N3b3JkLCBjYWxsYmFjaykge1xyXG4gIHRoaXMuc2VuZF9jcmVhdGUodXNlciwgcmF3UGFzc3dvcmQsIGNhbGxiYWNrKTsgXHJcbiAgaWYgKCFjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIHRoaXMucmVjdl9jcmVhdGUoKTtcclxuICB9XHJcbn07XHJcblxyXG5UVXNlclNlcnZpY2VDbGllbnQucHJvdG90eXBlLnNlbmRfY3JlYXRlID0gZnVuY3Rpb24odXNlciwgcmF3UGFzc3dvcmQsIGNhbGxiYWNrKSB7XHJcbiAgdGhpcy5vdXRwdXQud3JpdGVNZXNzYWdlQmVnaW4oJ2NyZWF0ZScsIFRocmlmdC5NZXNzYWdlVHlwZS5DQUxMLCB0aGlzLnNlcWlkKTtcclxuICB2YXIgYXJncyA9IG5ldyBUVXNlclNlcnZpY2VfY3JlYXRlX2FyZ3MoKTtcclxuICBhcmdzLnVzZXIgPSB1c2VyO1xyXG4gIGFyZ3MucmF3UGFzc3dvcmQgPSByYXdQYXNzd29yZDtcclxuICBhcmdzLndyaXRlKHRoaXMub3V0cHV0KTtcclxuICB0aGlzLm91dHB1dC53cml0ZU1lc3NhZ2VFbmQoKTtcclxuICBpZiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHRoaXMub3V0cHV0LmdldFRyYW5zcG9ydCgpLmZsdXNoKHRydWUsIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXN1bHQgPSBzZWxmLnJlY3ZfY3JlYXRlKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXN1bHQgPSBlO1xyXG4gICAgICB9XHJcbiAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHRoaXMub3V0cHV0LmdldFRyYW5zcG9ydCgpLmZsdXNoKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuVFVzZXJTZXJ2aWNlQ2xpZW50LnByb3RvdHlwZS5yZWN2X2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciByZXQgPSB0aGlzLmlucHV0LnJlYWRNZXNzYWdlQmVnaW4oKTtcclxuICB2YXIgZm5hbWUgPSByZXQuZm5hbWU7XHJcbiAgdmFyIG10eXBlID0gcmV0Lm10eXBlO1xyXG4gIHZhciByc2VxaWQgPSByZXQucnNlcWlkO1xyXG4gIGlmIChtdHlwZSA9PSBUaHJpZnQuTWVzc2FnZVR5cGUuRVhDRVBUSU9OKSB7XHJcbiAgICB2YXIgeCA9IG5ldyBUaHJpZnQuVEFwcGxpY2F0aW9uRXhjZXB0aW9uKCk7XHJcbiAgICB4LnJlYWQodGhpcy5pbnB1dCk7XHJcbiAgICB0aGlzLmlucHV0LnJlYWRNZXNzYWdlRW5kKCk7XHJcbiAgICB0aHJvdyB4O1xyXG4gIH1cclxuICB2YXIgcmVzdWx0ID0gbmV3IFRVc2VyU2VydmljZV9jcmVhdGVfcmVzdWx0KCk7XHJcbiAgcmVzdWx0LnJlYWQodGhpcy5pbnB1dCk7XHJcbiAgdGhpcy5pbnB1dC5yZWFkTWVzc2FnZUVuZCgpO1xyXG5cclxuICBpZiAobnVsbCAhPT0gcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgIHJldHVybiByZXN1bHQuc3VjY2VzcztcclxuICB9XHJcbiAgdGhyb3cgJ2NyZWF0ZSBmYWlsZWQ6IHVua25vd24gcmVzdWx0JztcclxufTtcclxuIiwiLy9cclxuLy8gQXV0b2dlbmVyYXRlZCBieSBUaHJpZnQgQ29tcGlsZXIgKDAuOS4yKVxyXG4vL1xyXG4vLyBETyBOT1QgRURJVCBVTkxFU1MgWU9VIEFSRSBTVVJFIFRIQVQgWU9VIEtOT1cgV0hBVCBZT1UgQVJFIERPSU5HXHJcbi8vXHJcblxyXG5cclxuVFVzZXIgPSBmdW5jdGlvbihhcmdzKSB7XHJcbiAgdGhpcy51c2VySWQgPSBudWxsO1xyXG4gIHRoaXMuZW1haWwgPSBudWxsO1xyXG4gIHRoaXMuZmlyc3ROYW1lID0gbnVsbDtcclxuICB0aGlzLmxhc3ROYW1lID0gbnVsbDtcclxuICB0aGlzLmZhbWlseSA9IG51bGw7XHJcbiAgdGhpcy5yb2xlcyA9IG51bGw7XHJcbiAgaWYgKGFyZ3MpIHtcclxuICAgIGlmIChhcmdzLnVzZXJJZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMudXNlcklkID0gYXJncy51c2VySWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJncy5lbWFpbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuZW1haWwgPSBhcmdzLmVtYWlsO1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ3MuZmlyc3ROYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5maXJzdE5hbWUgPSBhcmdzLmZpcnN0TmFtZTtcclxuICAgIH1cclxuICAgIGlmIChhcmdzLmxhc3ROYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5sYXN0TmFtZSA9IGFyZ3MubGFzdE5hbWU7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJncy5mYW1pbHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLmZhbWlseSA9IGFyZ3MuZmFtaWx5O1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ3Mucm9sZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnJvbGVzID0gYXJncy5yb2xlcztcclxuICAgIH1cclxuICB9XHJcbn07XHJcblRVc2VyLnByb3RvdHlwZSA9IHt9O1xyXG5UVXNlci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgaW5wdXQucmVhZFN0cnVjdEJlZ2luKCk7XHJcbiAgd2hpbGUgKHRydWUpXHJcbiAge1xyXG4gICAgdmFyIHJldCA9IGlucHV0LnJlYWRGaWVsZEJlZ2luKCk7XHJcbiAgICB2YXIgZm5hbWUgPSByZXQuZm5hbWU7XHJcbiAgICB2YXIgZnR5cGUgPSByZXQuZnR5cGU7XHJcbiAgICB2YXIgZmlkID0gcmV0LmZpZDtcclxuICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5TVE9QKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChmaWQpXHJcbiAgICB7XHJcbiAgICAgIGNhc2UgMTpcclxuICAgICAgaWYgKGZ0eXBlID09IFRocmlmdC5UeXBlLkkzMikge1xyXG4gICAgICAgIHRoaXMudXNlcklkID0gaW5wdXQucmVhZEkzMigpLnZhbHVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDI6XHJcbiAgICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5TVFJJTkcpIHtcclxuICAgICAgICB0aGlzLmVtYWlsID0gaW5wdXQucmVhZFN0cmluZygpLnZhbHVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDQ6XHJcbiAgICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5TVFJJTkcpIHtcclxuICAgICAgICB0aGlzLmZpcnN0TmFtZSA9IGlucHV0LnJlYWRTdHJpbmcoKS52YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSA1OlxyXG4gICAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RSSU5HKSB7XHJcbiAgICAgICAgdGhpcy5sYXN0TmFtZSA9IGlucHV0LnJlYWRTdHJpbmcoKS52YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSA2OlxyXG4gICAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RSVUNUKSB7XHJcbiAgICAgICAgdGhpcy5mYW1pbHkgPSBuZXcgVEZhbWlseSgpO1xyXG4gICAgICAgIHRoaXMuZmFtaWx5LnJlYWQoaW5wdXQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDc6XHJcbiAgICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5MSVNUKSB7XHJcbiAgICAgICAgdmFyIF9zaXplMCA9IDA7XHJcbiAgICAgICAgdmFyIF9ydG1wMzQ7XHJcbiAgICAgICAgdGhpcy5yb2xlcyA9IFtdO1xyXG4gICAgICAgIHZhciBfZXR5cGUzID0gMDtcclxuICAgICAgICBfcnRtcDM0ID0gaW5wdXQucmVhZExpc3RCZWdpbigpO1xyXG4gICAgICAgIF9ldHlwZTMgPSBfcnRtcDM0LmV0eXBlO1xyXG4gICAgICAgIF9zaXplMCA9IF9ydG1wMzQuc2l6ZTtcclxuICAgICAgICBmb3IgKHZhciBfaTUgPSAwOyBfaTUgPCBfc2l6ZTA7ICsrX2k1KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHZhciBlbGVtNiA9IG51bGw7XHJcbiAgICAgICAgICBlbGVtNiA9IG5ldyBUUm9sZSgpO1xyXG4gICAgICAgICAgZWxlbTYucmVhZChpbnB1dCk7XHJcbiAgICAgICAgICB0aGlzLnJvbGVzLnB1c2goZWxlbTYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnB1dC5yZWFkTGlzdEVuZCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaW5wdXQucmVhZEZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlucHV0LnJlYWRTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UVXNlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVFVzZXInKTtcclxuICBpZiAodGhpcy51c2VySWQgIT09IG51bGwgJiYgdGhpcy51c2VySWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigndXNlcklkJywgVGhyaWZ0LlR5cGUuSTMyLCAxKTtcclxuICAgIG91dHB1dC53cml0ZUkzMih0aGlzLnVzZXJJZCk7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEVuZCgpO1xyXG4gIH1cclxuICBpZiAodGhpcy5lbWFpbCAhPT0gbnVsbCAmJiB0aGlzLmVtYWlsICE9PSB1bmRlZmluZWQpIHtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkQmVnaW4oJ2VtYWlsJywgVGhyaWZ0LlR5cGUuU1RSSU5HLCAyKTtcclxuICAgIG91dHB1dC53cml0ZVN0cmluZyh0aGlzLmVtYWlsKTtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLmZpcnN0TmFtZSAhPT0gbnVsbCAmJiB0aGlzLmZpcnN0TmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEJlZ2luKCdmaXJzdE5hbWUnLCBUaHJpZnQuVHlwZS5TVFJJTkcsIDQpO1xyXG4gICAgb3V0cHV0LndyaXRlU3RyaW5nKHRoaXMuZmlyc3ROYW1lKTtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLmxhc3ROYW1lICE9PSBudWxsICYmIHRoaXMubGFzdE5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbignbGFzdE5hbWUnLCBUaHJpZnQuVHlwZS5TVFJJTkcsIDUpO1xyXG4gICAgb3V0cHV0LndyaXRlU3RyaW5nKHRoaXMubGFzdE5hbWUpO1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTtcclxuICB9XHJcbiAgaWYgKHRoaXMuZmFtaWx5ICE9PSBudWxsICYmIHRoaXMuZmFtaWx5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkQmVnaW4oJ2ZhbWlseScsIFRocmlmdC5UeXBlLlNUUlVDVCwgNik7XHJcbiAgICB0aGlzLmZhbWlseS53cml0ZShvdXRwdXQpO1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTtcclxuICB9XHJcbiAgaWYgKHRoaXMucm9sZXMgIT09IG51bGwgJiYgdGhpcy5yb2xlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEJlZ2luKCdyb2xlcycsIFRocmlmdC5UeXBlLkxJU1QsIDcpO1xyXG4gICAgb3V0cHV0LndyaXRlTGlzdEJlZ2luKFRocmlmdC5UeXBlLlNUUlVDVCwgdGhpcy5yb2xlcy5sZW5ndGgpO1xyXG4gICAgZm9yICh2YXIgaXRlcjcgaW4gdGhpcy5yb2xlcylcclxuICAgIHtcclxuICAgICAgaWYgKHRoaXMucm9sZXMuaGFzT3duUHJvcGVydHkoaXRlcjcpKVxyXG4gICAgICB7XHJcbiAgICAgICAgaXRlcjcgPSB0aGlzLnJvbGVzW2l0ZXI3XTtcclxuICAgICAgICBpdGVyNy53cml0ZShvdXRwdXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBvdXRwdXQud3JpdGVMaXN0RW5kKCk7XHJcbiAgICBvdXRwdXQud3JpdGVGaWVsZEVuZCgpO1xyXG4gIH1cclxuICBvdXRwdXQud3JpdGVGaWVsZFN0b3AoKTtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5URmFtaWx5ID0gZnVuY3Rpb24oYXJncykge1xyXG4gIHRoaXMuZmFtaWx5SWQgPSBudWxsO1xyXG4gIHRoaXMuZmFtaWx5TmFtZSA9IG51bGw7XHJcbiAgaWYgKGFyZ3MpIHtcclxuICAgIGlmIChhcmdzLmZhbWlseUlkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5mYW1pbHlJZCA9IGFyZ3MuZmFtaWx5SWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJncy5mYW1pbHlOYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5mYW1pbHlOYW1lID0gYXJncy5mYW1pbHlOYW1lO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuVEZhbWlseS5wcm90b3R5cGUgPSB7fTtcclxuVEZhbWlseS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgaW5wdXQucmVhZFN0cnVjdEJlZ2luKCk7XHJcbiAgd2hpbGUgKHRydWUpXHJcbiAge1xyXG4gICAgdmFyIHJldCA9IGlucHV0LnJlYWRGaWVsZEJlZ2luKCk7XHJcbiAgICB2YXIgZm5hbWUgPSByZXQuZm5hbWU7XHJcbiAgICB2YXIgZnR5cGUgPSByZXQuZnR5cGU7XHJcbiAgICB2YXIgZmlkID0gcmV0LmZpZDtcclxuICAgIGlmIChmdHlwZSA9PSBUaHJpZnQuVHlwZS5TVE9QKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChmaWQpXHJcbiAgICB7XHJcbiAgICAgIGNhc2UgMTpcclxuICAgICAgaWYgKGZ0eXBlID09IFRocmlmdC5UeXBlLkkzMikge1xyXG4gICAgICAgIHRoaXMuZmFtaWx5SWQgPSBpbnB1dC5yZWFkSTMyKCkudmFsdWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaW5wdXQuc2tpcChmdHlwZSk7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgaWYgKGZ0eXBlID09IFRocmlmdC5UeXBlLlNUUklORykge1xyXG4gICAgICAgIHRoaXMuZmFtaWx5TmFtZSA9IGlucHV0LnJlYWRTdHJpbmcoKS52YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgIH1cclxuICAgIGlucHV0LnJlYWRGaWVsZEVuZCgpO1xyXG4gIH1cclxuICBpbnB1dC5yZWFkU3RydWN0RW5kKCk7XHJcbiAgcmV0dXJuO1xyXG59O1xyXG5cclxuVEZhbWlseS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVEZhbWlseScpO1xyXG4gIGlmICh0aGlzLmZhbWlseUlkICE9PSBudWxsICYmIHRoaXMuZmFtaWx5SWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbignZmFtaWx5SWQnLCBUaHJpZnQuVHlwZS5JMzIsIDEpO1xyXG4gICAgb3V0cHV0LndyaXRlSTMyKHRoaXMuZmFtaWx5SWQpO1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTtcclxuICB9XHJcbiAgaWYgKHRoaXMuZmFtaWx5TmFtZSAhPT0gbnVsbCAmJiB0aGlzLmZhbWlseU5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbignZmFtaWx5TmFtZScsIFRocmlmdC5UeXBlLlNUUklORywgMik7XHJcbiAgICBvdXRwdXQud3JpdGVTdHJpbmcodGhpcy5mYW1pbHlOYW1lKTtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIG91dHB1dC53cml0ZUZpZWxkU3RvcCgpO1xyXG4gIG91dHB1dC53cml0ZVN0cnVjdEVuZCgpO1xyXG4gIHJldHVybjtcclxufTtcclxuXHJcblRSb2xlID0gZnVuY3Rpb24oYXJncykge1xyXG4gIHRoaXMucm9sZU5hbWUgPSBudWxsO1xyXG4gIGlmIChhcmdzKSB7XHJcbiAgICBpZiAoYXJncy5yb2xlTmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMucm9sZU5hbWUgPSBhcmdzLnJvbGVOYW1lO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuVFJvbGUucHJvdG90eXBlID0ge307XHJcblRSb2xlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24oaW5wdXQpIHtcclxuICBpbnB1dC5yZWFkU3RydWN0QmVnaW4oKTtcclxuICB3aGlsZSAodHJ1ZSlcclxuICB7XHJcbiAgICB2YXIgcmV0ID0gaW5wdXQucmVhZEZpZWxkQmVnaW4oKTtcclxuICAgIHZhciBmbmFtZSA9IHJldC5mbmFtZTtcclxuICAgIHZhciBmdHlwZSA9IHJldC5mdHlwZTtcclxuICAgIHZhciBmaWQgPSByZXQuZmlkO1xyXG4gICAgaWYgKGZ0eXBlID09IFRocmlmdC5UeXBlLlNUT1ApIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKGZpZClcclxuICAgIHtcclxuICAgICAgY2FzZSAxOlxyXG4gICAgICBpZiAoZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RSSU5HKSB7XHJcbiAgICAgICAgdGhpcy5yb2xlTmFtZSA9IGlucHV0LnJlYWRTdHJpbmcoKS52YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbnB1dC5za2lwKGZ0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlucHV0LnNraXAoZnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaW5wdXQucmVhZEZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIGlucHV0LnJlYWRTdHJ1Y3RFbmQoKTtcclxuICByZXR1cm47XHJcbn07XHJcblxyXG5UUm9sZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcclxuICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVFJvbGUnKTtcclxuICBpZiAodGhpcy5yb2xlTmFtZSAhPT0gbnVsbCAmJiB0aGlzLnJvbGVOYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkQmVnaW4oJ3JvbGVOYW1lJywgVGhyaWZ0LlR5cGUuU1RSSU5HLCAxKTtcclxuICAgIG91dHB1dC53cml0ZVN0cmluZyh0aGlzLnJvbGVOYW1lKTtcclxuICAgIG91dHB1dC53cml0ZUZpZWxkRW5kKCk7XHJcbiAgfVxyXG4gIG91dHB1dC53cml0ZUZpZWxkU3RvcCgpO1xyXG4gIG91dHB1dC53cml0ZVN0cnVjdEVuZCgpO1xyXG4gIHJldHVybjtcclxufTtcclxuXHJcbiIsIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qanNoaW50IGV2aWw6dHJ1ZSovXG5cbi8qKlxuICogVGhlIFRocmlmdCBuYW1lc3BhY2UgaG91c2VzIHRoZSBBcGFjaGUgVGhyaWZ0IEphdmFTY3JpcHQgbGlicmFyeSBcbiAqIGVsZW1lbnRzIHByb3ZpZGluZyBKYXZhU2NyaXB0IGJpbmRpbmdzIGZvciB0aGUgQXBhY2hlIFRocmlmdCBSUEMgXG4gKiBzeXN0ZW0uIEVuZCB1c2VycyB3aWxsIHR5cGljYWxseSBvbmx5IGRpcmVjdGx5IG1ha2UgdXNlIG9mIHRoZSBcbiAqIFRyYW5zcG9ydCAoVFhIUlRyYW5zcG9ydC9UV2ViU29ja2V0VHJhbnNwb3J0KSBhbmQgUHJvdG9jb2wgXG4gKiAoVEpTT05QUm90b2NvbC9UQmluYXJ5UHJvdG9jb2wpIGNvbnN0cnVjdG9ycy5cbiAqIFxuICogT2JqZWN0IG1ldGhvZHMgYmVnaW5uaW5nIHdpdGggYSBfXyAoZS5nLiBfX29uT3BlbigpKSBhcmUgaW50ZXJuYWwgXG4gKiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgb3V0c2lkZSBvZiB0aGUgb2JqZWN0J3Mgb3duIG1ldGhvZHMuXG4gKiBcbiAqIFRoaXMgbGlicmFyeSBjcmVhdGVzIG9uZSBnbG9iYWwgb2JqZWN0OiBUaHJpZnRcbiAqIENvZGUgaW4gdGhpcyBsaWJyYXJ5IG11c3QgbmV2ZXIgY3JlYXRlIGFkZGl0aW9uYWwgZ2xvYmFsIGlkZW50aWZpZXJzLFxuICogYWxsIGZlYXR1cmVzIG11c3QgYmUgc2NvcGVkIHdpdGhpbiB0aGUgVGhyaWZ0IG5hbWVzcGFjZS5cbiAqIEBuYW1lc3BhY2VcbiAqIEBleGFtcGxlXG4gKiAgICAgdmFyIHRyYW5zcG9ydCA9IG5ldyBUaHJpZnQuVHJhbnNwb3J0KFwiaHR0cDovL2xvY2FsaG9zdDo4NTg1XCIpO1xuICogICAgIHZhciBwcm90b2NvbCAgPSBuZXcgVGhyaWZ0LlByb3RvY29sKHRyYW5zcG9ydCk7XG4gKiAgICAgdmFyIGNsaWVudCA9IG5ldyBNeVRocmlmdFN2Y0NsaWVudChwcm90b2NvbCk7XG4gKiAgICAgdmFyIHJlc3VsdCA9IGNsaWVudC5NeU1ldGhvZCgpO1xuICovXG52YXIgVGhyaWZ0ID0ge1xuICAgIC8qKlxuICAgICAqIFRocmlmdCBKYXZhU2NyaXB0IGxpYnJhcnkgdmVyc2lvbi5cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAY29uc3Qge3N0cmluZ30gVmVyc2lvblxuICAgICAqIEBtZW1iZXJvZiBUaHJpZnRcbiAgICAgKi9cbiAgICBWZXJzaW9uOiAnMC45LjInLFxuXG4gICAgLyoqXG4gICAgICogVGhyaWZ0IElETCB0eXBlIHN0cmluZyB0byBJZCBtYXBwaW5nLlxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgU1RPUCAgIC0gRW5kIG9mIGEgc2V0IG9mIGZpZWxkcy5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gIFZPSUQgICAtIE5vIHZhbHVlIChvbmx5IGxlZ2FsIGZvciByZXR1cm4gdHlwZXMpLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgQk9PTCAgIC0gVHJ1ZS9GYWxzZSBpbnRlZ2VyLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgQllURSAgIC0gU2lnbmVkIDggYml0IGludGVnZXIuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICBJMDggICAgLSBTaWduZWQgOCBiaXQgaW50ZWdlci4gICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgRE9VQkxFIC0gNjQgYml0IElFRUUgODU0IGZsb2F0aW5nIHBvaW50LlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgSTE2ICAgIC0gU2lnbmVkIDE2IGJpdCBpbnRlZ2VyLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgSTMyICAgIC0gU2lnbmVkIDMyIGJpdCBpbnRlZ2VyLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgSTY0ICAgIC0gU2lnbmVkIDY0IGJpdCBpbnRlZ2VyLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgU1RSSU5HIC0gQXJyYXkgb2YgYnl0ZXMgcmVwcmVzZW50aW5nIGEgc3RyaW5nIG9mIGNoYXJhY3RlcnMuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICBVVEY3ICAgLSBBcnJheSBvZiBieXRlcyByZXByZXNlbnRpbmcgYSBzdHJpbmcgb2YgVVRGNyBlbmNvZGVkIGNoYXJhY3RlcnMuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICBTVFJVQ1QgLSBBIG11bHRpZmllbGQgdHlwZS5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gIE1BUCAgICAtIEEgY29sbGVjdGlvbiB0eXBlIChtYXAvYXNzb2NpYXRpdmUtYXJyYXkvZGljdGlvbmFyeSkuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICBTRVQgICAgLSBBIGNvbGxlY3Rpb24gdHlwZSAodW5vcmRlcmVkIGFuZCB3aXRob3V0IHJlcGVhdGVkIHZhbHVlcykuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICBMSVNUICAgLSBBIGNvbGxlY3Rpb24gdHlwZSAodW5vcmRlcmVkKS5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gIFVURjggICAtIEFycmF5IG9mIGJ5dGVzIHJlcHJlc2VudGluZyBhIHN0cmluZyBvZiBVVEY4IGVuY29kZWQgY2hhcmFjdGVycy5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gIFVURjE2ICAtIEFycmF5IG9mIGJ5dGVzIHJlcHJlc2VudGluZyBhIHN0cmluZyBvZiBVVEYxNiBlbmNvZGVkIGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgVHlwZToge1xuICAgICAgICAnU1RPUCcgOiAwLFxuICAgICAgICAnVk9JRCcgOiAxLFxuICAgICAgICAnQk9PTCcgOiAyLFxuICAgICAgICAnQllURScgOiAzLFxuICAgICAgICAnSTA4JyA6IDMsXG4gICAgICAgICdET1VCTEUnIDogNCxcbiAgICAgICAgJ0kxNicgOiA2LFxuICAgICAgICAnSTMyJyA6IDgsXG4gICAgICAgICdJNjQnIDogMTAsXG4gICAgICAgICdTVFJJTkcnIDogMTEsXG4gICAgICAgICdVVEY3JyA6IDExLFxuICAgICAgICAnU1RSVUNUJyA6IDEyLFxuICAgICAgICAnTUFQJyA6IDEzLFxuICAgICAgICAnU0VUJyA6IDE0LFxuICAgICAgICAnTElTVCcgOiAxNSxcbiAgICAgICAgJ1VURjgnIDogMTYsXG4gICAgICAgICdVVEYxNicgOiAxN1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaHJpZnQgUlBDIG1lc3NhZ2UgdHlwZSBzdHJpbmcgdG8gSWQgbWFwcGluZy5cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gIENBTEwgICAgICAtIFJQQyBjYWxsIHNlbnQgZnJvbSBjbGllbnQgdG8gc2VydmVyLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgUkVQTFkgICAgIC0gUlBDIGNhbGwgbm9ybWFsIHJlc3BvbnNlIGZyb20gc2VydmVyIHRvIGNsaWVudC5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gIEVYQ0VQVElPTiAtIFJQQyBjYWxsIGV4Y2VwdGlvbiByZXNwb25zZSBmcm9tIHNlcnZlciB0byBjbGllbnQuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9ICBPTkVXQVkgICAgLSBPbmV3YXkgUlBDIGNhbGwgZnJvbSBjbGllbnQgdG8gc2VydmVyIHdpdGggbm8gcmVzcG9uc2UuXG4gICAgICovXG4gICAgTWVzc2FnZVR5cGU6IHtcbiAgICAgICAgJ0NBTEwnIDogMSxcbiAgICAgICAgJ1JFUExZJyA6IDIsXG4gICAgICAgICdFWENFUFRJT04nIDogMyxcbiAgICAgICAgJ09ORVdBWScgOiA0XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFV0aWxpdHkgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBjb3VudCBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gT2JqZWN0IHRvIHRlc3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gbnVtYmVyIG9mIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgb2JqZWN0TGVuZ3RoOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBlc3RhYmxpc2ggcHJvdG90eXBlIGluaGVyaXRhbmNlLlxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qYXZhc2NyaXB0LmNyb2NrZm9yZC5jb20vcHJvdG90eXBhbC5odG1sfFByb3RvdHlwYWwgSW5oZXJpdGFuY2V9XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3IgLSBDb250c3RydWN0b3IgZnVuY3Rpb24gdG8gc2V0IGFzIGRlcml2ZWQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvciAtIENvbnRzdHJ1Y3RvciBmdW5jdGlvbiB0byBzZXQgYXMgYmFzZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdIC0gVHlwZSBuYW1lIHRvIHNldCBhcyBuYW1lIHByb3BlcnR5IGluIGRlcml2ZWQgcHJvdG90eXBlLlxuICAgICAqL1xuICAgIGluaGVyaXRzOiBmdW5jdGlvbihjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgbmFtZSkge1xuICAgICAgZnVuY3Rpb24gRigpIHt9XG4gICAgICBGLnByb3RvdHlwZSA9IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IEYoKTtcbiAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5uYW1lID0gbmFtZSB8fCBcIlwiO1xuICAgIH1cbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBUaHJpZnQgVEV4Y2VwdGlvbiBpbnN0YW5jZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1Z21lbnRzIEVycm9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBURXhjZXB0aW9uIG1lc3NhZ2UgKGRpc3RpbmN0IGZyb20gdGhlIEVycm9yIG1lc3NhZ2UpLlxuICogQGNsYXNzZGVzYyBURXhjZXB0aW9uIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBhbGwgVGhyaWZ0IGV4Y2VwdGlvbnMgdHlwZXMuXG4gKi9cblRocmlmdC5URXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59O1xuVGhyaWZ0LmluaGVyaXRzKFRocmlmdC5URXhjZXB0aW9uLCBFcnJvciwgJ1RFeGNlcHRpb24nKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtZXNzYWdlIHNldCBvbiB0aGUgZXhjZXB0aW9uLlxuICogQHJlYWRvbmx5XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBleGNlcHRpb24gbWVzc2FnZVxuICovXG5UaHJpZnQuVEV4Y2VwdGlvbi5wcm90b3R5cGUuZ2V0TWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG59O1xuXG4vKipcbiAqIFRocmlmdCBBcHBsaWNhdGlvbiBFeGNlcHRpb24gdHlwZSBzdHJpbmcgdG8gSWQgbWFwcGluZy5cbiAqIEByZWFkb25seVxuICogQHByb3BlcnR5IHtudW1iZXJ9ICBVTktOT1dOICAgICAgICAgICAgICAgICAtIFVua25vd24vdW5kZWZpbmVkLlxuICogQHByb3BlcnR5IHtudW1iZXJ9ICBVTktOT1dOX01FVEhPRCAgICAgICAgICAtIENsaWVudCBhdHRlbXB0ZWQgdG8gY2FsbCBhIG1ldGhvZCB1bmtub3duIHRvIHRoZSBzZXJ2ZXIuXG4gKiBAcHJvcGVydHkge251bWJlcn0gIElOVkFMSURfTUVTU0FHRV9UWVBFICAgIC0gQ2xpZW50IHBhc3NlZCBhbiB1bmtub3duL3Vuc3VwcG9ydGVkIE1lc3NhZ2VUeXBlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9ICBXUk9OR19NRVRIT0RfTkFNRSAgICAgICAtIFVudXNlZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgQkFEX1NFUVVFTkNFX0lEICAgICAgICAgLSBVbnVzZWQgaW4gVGhyaWZ0IFJQQywgdXNlZCB0byBmbGFnIHByb3ByaWV0YXJ5IHNlcXVlbmNlIG51bWJlciBlcnJvcnMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gIE1JU1NJTkdfUkVTVUxUICAgICAgICAgIC0gUmFpc2VkIGJ5IGEgc2VydmVyIHByb2Nlc3NvciBpZiBhIGhhbmRsZXIgZmFpbHMgdG8gc3VwcGx5IHRoZSByZXF1aXJlZCByZXR1cm4gcmVzdWx0LlxuICogQHByb3BlcnR5IHtudW1iZXJ9ICBJTlRFUk5BTF9FUlJPUiAgICAgICAgICAtIFNvbWV0aGluZyBiYWQgaGFwcGVuZWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gIFBST1RPQ09MX0VSUk9SICAgICAgICAgIC0gVGhlIHByb3RvY29sIGxheWVyIGZhaWxlZCB0byBzZXJpYWxpemUgb3IgZGVzZXJpYWxpemUgZGF0YS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSAgSU5WQUxJRF9UUkFOU0ZPUk0gICAgICAgLSBVbnVzZWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gIElOVkFMSURfUFJPVE9DT0wgICAgICAgIC0gVGhlIHByb3RvY29sIChvciB2ZXJzaW9uKSBpcyBub3Qgc3VwcG9ydGVkLlxuICogQHByb3BlcnR5IHtudW1iZXJ9ICBVTlNVUFBPUlRFRF9DTElFTlRfVFlQRSAtIFVudXNlZC5cbiAqL1xuVGhyaWZ0LlRBcHBsaWNhdGlvbkV4Y2VwdGlvblR5cGUgPSB7XG4gICAgJ1VOS05PV04nIDogMCxcbiAgICAnVU5LTk9XTl9NRVRIT0QnIDogMSxcbiAgICAnSU5WQUxJRF9NRVNTQUdFX1RZUEUnIDogMixcbiAgICAnV1JPTkdfTUVUSE9EX05BTUUnIDogMyxcbiAgICAnQkFEX1NFUVVFTkNFX0lEJyA6IDQsXG4gICAgJ01JU1NJTkdfUkVTVUxUJyA6IDUsXG4gICAgJ0lOVEVSTkFMX0VSUk9SJyA6IDYsXG4gICAgJ1BST1RPQ09MX0VSUk9SJyA6IDcsXG4gICAgJ0lOVkFMSURfVFJBTlNGT1JNJyA6IDgsXG4gICAgJ0lOVkFMSURfUFJPVE9DT0wnIDogOSxcbiAgICAnVU5TVVBQT1JURURfQ0xJRU5UX1RZUEUnIDogMTBcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBUaHJpZnQgVEFwcGxpY2F0aW9uRXhjZXB0aW9uIGluc3RhbmNlLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXVnbWVudHMgVGhyaWZ0LlRFeGNlcHRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIFRBcHBsaWNhdGlvbkV4Y2VwdGlvbiBtZXNzYWdlIChkaXN0aW5jdCBmcm9tIHRoZSBFcnJvciBtZXNzYWdlKS5cbiAqIEBwYXJhbSB7VGhyaWZ0LlRBcHBsaWNhdGlvbkV4Y2VwdGlvblR5cGV9IFtjb2RlXSAtIFRoZSBUQXBwbGljYXRpb25FeGNlcHRpb25UeXBlIGNvZGUuXG4gKiBAY2xhc3NkZXNjIFRBcHBsaWNhdGlvbkV4Y2VwdGlvbiBpcyB0aGUgZXhjZXB0aW9uIGNsYXNzIHVzZWQgdG8gcHJvcGFnYXRlIGV4Y2VwdGlvbnMgZnJvbSBhbiBSUEMgc2VydmVyIGJhY2sgdG8gYSBjYWxsaW5nIGNsaWVudC5cbiovXG5UaHJpZnQuVEFwcGxpY2F0aW9uRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgY29kZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jb2RlID0gdHlwZW9mIGNvZGUgPT09IFwibnVtYmVyXCIgPyBjb2RlIDogMDtcbn07XG5UaHJpZnQuaW5oZXJpdHMoVGhyaWZ0LlRBcHBsaWNhdGlvbkV4Y2VwdGlvbiwgVGhyaWZ0LlRFeGNlcHRpb24sICdUQXBwbGljYXRpb25FeGNlcHRpb24nKTtcblxuLyoqXG4gKiBSZWFkIGEgVEFwcGxpY2F0aW9uRXhjZXB0aW9uIGZyb20gdGhlIHN1cHBsaWVkIHByb3RvY29sLlxuICogQHBhcmFtIHtvYmplY3R9IGlucHV0IC0gVGhlIGlucHV0IHByb3RvY29sIHRvIHJlYWQgZnJvbS5cbiAqL1xuVGhyaWZ0LlRBcHBsaWNhdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgICAgdmFyIHJldCA9IGlucHV0LnJlYWRGaWVsZEJlZ2luKCk7XG5cbiAgICAgICAgaWYgKHJldC5mdHlwZSA9PSBUaHJpZnQuVHlwZS5TVE9QKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaWQgPSByZXQuZmlkO1xuXG4gICAgICAgIHN3aXRjaCAoZmlkKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKHJldC5mdHlwZSA9PSBUaHJpZnQuVHlwZS5TVFJJTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gaW5wdXQucmVhZFN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSByZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gaW5wdXQuc2tpcChyZXQuZnR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAocmV0LmZ0eXBlID09IFRocmlmdC5UeXBlLkkzMikge1xuICAgICAgICAgICAgICAgICAgICByZXQgPSBpbnB1dC5yZWFkSTMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29kZSA9IHJldC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXQgPSBpbnB1dC5za2lwKHJldC5mdHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldCA9IGlucHV0LnNraXAocmV0LmZ0eXBlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0LnJlYWRGaWVsZEVuZCgpO1xuICAgIH1cblxuICAgIGlucHV0LnJlYWRTdHJ1Y3RFbmQoKTtcbn07XG5cbi8qKlxuICogV2l0ZSBhIFRBcHBsaWNhdGlvbkV4Y2VwdGlvbiB0byB0aGUgc3VwcGxpZWQgcHJvdG9jb2wuXG4gKiBAcGFyYW0ge29iamVjdH0gb3V0cHV0IC0gVGhlIG91dHB1dCBwcm90b2NvbCB0byB3cml0ZSB0by5cbiAqL1xuVGhyaWZ0LlRBcHBsaWNhdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbignVEFwcGxpY2F0aW9uRXhjZXB0aW9uJyk7XG5cbiAgICBpZiAodGhpcy5tZXNzYWdlKSB7XG4gICAgICAgIG91dHB1dC53cml0ZUZpZWxkQmVnaW4oJ21lc3NhZ2UnLCBUaHJpZnQuVHlwZS5TVFJJTkcsIDEpO1xuICAgICAgICBvdXRwdXQud3JpdGVTdHJpbmcodGhpcy5nZXRNZXNzYWdlKCkpO1xuICAgICAgICBvdXRwdXQud3JpdGVGaWVsZEVuZCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvZGUpIHtcbiAgICAgICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigndHlwZScsIFRocmlmdC5UeXBlLkkzMiwgMik7XG4gICAgICAgIG91dHB1dC53cml0ZUkzMih0aGlzLmNvZGUpO1xuICAgICAgICBvdXRwdXQud3JpdGVGaWVsZEVuZCgpO1xuICAgIH1cblxuICAgIG91dHB1dC53cml0ZUZpZWxkU3RvcCgpO1xuICAgIG91dHB1dC53cml0ZVN0cnVjdEVuZCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhcHBsaWNhdGlvbiBleGNlcHRpb24gY29kZSBzZXQgb24gdGhlIGV4Y2VwdGlvbi5cbiAqIEByZWFkb25seVxuICogQHJldHVybnMge1RocmlmdC5UQXBwbGljYXRpb25FeGNlcHRpb25UeXBlfSBleGNlcHRpb24gY29kZVxuICovXG5UaHJpZnQuVEFwcGxpY2F0aW9uRXhjZXB0aW9uLnByb3RvdHlwZS5nZXRDb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29kZTtcbn07XG5cbi8qKlxuICogQ29uc3RydWN0b3IgRnVuY3Rpb24gZm9yIHRoZSBYSFIgdHJhbnNwb3J0LlxuICogSWYgeW91IGRvIG5vdCBzcGVjaWZ5IGEgdXJsIHRoZW4geW91IG11c3QgaGFuZGxlIFhIUiBvcGVyYXRpb25zIG9uXG4gKiB5b3VyIG93bi4gVGhpcyB0eXBlIGNhbiBhbHNvIGJlIGNvbnN0cnVjdGVkIHVzaW5nIHRoZSBUcmFuc3BvcnQgYWxpYXNcbiAqIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VybF0gLSBUaGUgVVJMIHRvIGNvbm5lY3QgdG8uXG4gKiBAY2xhc3NkZXNjIFRoZSBBcGFjaGUgVGhyaWZ0IFRyYW5zcG9ydCBsYXllciBwZXJmb3JtcyBieXRlIGxldmVsIEkvTyBcbiAqIGJldHdlZW4gUlBDIGNsaWVudHMgYW5kIHNlcnZlcnMuIFRoZSBKYXZhU2NyaXB0IFRYSFJUcmFuc3BvcnQgb2JqZWN0IFxuICogdXNlcyBIdHRwW3NdL1hIUi4gVGFyZ2V0IHNlcnZlcnMgbXVzdCBpbXBsZW1lbnQgdGhlIGh0dHBbc10gdHJhbnNwb3J0XG4gKiAoc2VlOiBub2RlLmpzIGV4YW1wbGUgc2VydmVyX2h0dHAuanMpLlxuICogQGV4YW1wbGVcbiAqICAgICB2YXIgdHJhbnNwb3J0ID0gbmV3IFRocmlmdC5UWEhSVHJhbnNwb3J0KFwiaHR0cDovL2xvY2FsaG9zdDo4NTg1XCIpO1xuICovXG5UaHJpZnQuVHJhbnNwb3J0ID0gVGhyaWZ0LlRYSFJUcmFuc3BvcnQgPSBmdW5jdGlvbih1cmwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLndwb3MgPSAwO1xuICAgIHRoaXMucnBvcyA9IDA7XG4gICAgdGhpcy51c2VDT1JTID0gKG9wdGlvbnMgJiYgb3B0aW9ucy51c2VDT1JTKTtcbiAgICB0aGlzLnNlbmRfYnVmID0gJyc7XG4gICAgdGhpcy5yZWN2X2J1ZiA9ICcnO1xufTtcblxuVGhyaWZ0LlRYSFJUcmFuc3BvcnQucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGJyb3dzZXIgc3BlY2lmaWMgWG1sSHR0cFJlcXVlc3QgT2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBicm93c2VyIFhIUiBpbnRlcmZhY2Ugb2JqZWN0XG4gICAgICovXG4gICAgZ2V0WG1sSHR0cFJlcXVlc3RPYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkgeyByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7IH0gY2F0Y2ggKGUxKSB7IH1cbiAgICAgICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUCcpOyB9IGNhdGNoIChlMikgeyB9XG4gICAgICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTsgfSBjYXRjaCAoZTMpIHsgfVxuXG4gICAgICAgIHRocm93IFwiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBYSFIuXCI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBjdXJyZW50IFhSSCByZXF1ZXN0IGlmIHRoZSB0cmFuc3BvcnQgd2FzIGNyZWF0ZWQgd2l0aCBhIFVSTCBcbiAgICAgKiBhbmQgdGhlIGFzeW5jIHBhcmFtZXRlciBpcyBmYWxzZS4gSWYgdGhlIHRyYW5zcG9ydCB3YXMgbm90IGNyZWF0ZWQgd2l0aFxuICAgICAqIGEgVVJMLCBvciB0aGUgYXN5bmMgcGFyYW1ldGVyIGlzIFRydWUgYW5kIG5vIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCBvciBcbiAgICAgKiB0aGUgVVJMIGlzIGFuIGVtcHR5IHN0cmluZywgdGhlIGN1cnJlbnQgc2VuZCBidWZmZXIgaXMgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGFzeW5jIC0gSWYgdHJ1ZSB0aGUgY3VycmVudCBzZW5kIGJ1ZmZlciBpcyByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY2FsbGJhY2sgLSBPcHRpb25hbCBhc3luYyBjb21wbGV0aW9uIGNhbGxiYWNrIFxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR8c3RyaW5nfSBOb3RoaW5nIG9yIHRoZSBjdXJyZW50IHNlbmQgYnVmZmVyLlxuICAgICAqIEB0aHJvd3Mge3N0cmluZ30gSWYgWEhSIGZhaWxzLlxuICAgICAqL1xuICAgIGZsdXNoOiBmdW5jdGlvbihhc3luYywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoKGFzeW5jICYmICFjYWxsYmFjaykgfHwgdGhpcy51cmwgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnVybCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRfYnVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHhyZXEgPSB0aGlzLmdldFhtbEh0dHBSZXF1ZXN0T2JqZWN0KCk7XG5cbiAgICAgICAgaWYgKHhyZXEub3ZlcnJpZGVNaW1lVHlwZSkge1xuICAgICAgICAgICAgeHJlcS5vdmVycmlkZU1pbWVUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vSWdub3JlIFhIUiBjYWxsYmFja3MgdW50aWwgdGhlIGRhdGEgYXJyaXZlcywgdGhlbiBjYWxsIHRoZVxuICAgICAgICAgICAgLy8gIGNsaWVudCdzIGNhbGxiYWNrXG4gICAgICAgICAgICB4cmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IFxuICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudENhbGxiYWNrID0gY2FsbGJhY2s7ICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gNCAmJiB0aGlzLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRSZWN2QnVmZmVyKHRoaXMucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50Q2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgeHJlcS5vcGVuKCdQT1NUJywgdGhpcy51cmwsICEhYXN5bmMpO1xuICAgICAgICB4cmVxLnNlbmQodGhpcy5zZW5kX2J1Zik7XG4gICAgICAgIGlmIChhc3luYyAmJiBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHhyZXEucmVhZHlTdGF0ZSAhPSA0KSB7XG4gICAgICAgICAgICB0aHJvdyAnZW5jb3VudGVyZWQgYW4gdW5rbm93biBhamF4IHJlYWR5IHN0YXRlOiAnICsgeHJlcS5yZWFkeVN0YXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHhyZXEuc3RhdHVzICE9IDIwMCkge1xuICAgICAgICAgICAgdGhyb3cgJ2VuY291bnRlcmVkIGEgdW5rbm93biByZXF1ZXN0IHN0YXR1czogJyArIHhyZXEuc3RhdHVzO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWN2X2J1ZiA9IHhyZXEucmVzcG9uc2VUZXh0O1xuICAgICAgICB0aGlzLnJlY3ZfYnVmX3N6ID0gdGhpcy5yZWN2X2J1Zi5sZW5ndGg7XG4gICAgICAgIHRoaXMud3BvcyA9IHRoaXMucmVjdl9idWYubGVuZ3RoO1xuICAgICAgICB0aGlzLnJwb3MgPSAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgalF1ZXJ5IFhIUiBvYmplY3QgdG8gYmUgdXNlZCBmb3IgYSBUaHJpZnQgc2VydmVyIGNhbGwuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNsaWVudCAtIFRoZSBUaHJpZnQgU2VydmljZSBjbGllbnQgb2JqZWN0IGdlbmVyYXRlZCBieSB0aGUgSURMIGNvbXBpbGVyLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwb3N0RGF0YSAtIFRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBhcmdzIC0gVGhlIG9yaWdpbmFsIGNhbGwgYXJndW1lbnRzIHdpdGggdGhlIHN1Y2Nlc3MgY2FsbCBiYWNrIGF0IHRoZSBlbmQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVjdl9tZXRob2QgLSBUaGUgVGhyaWZ0IFNlcnZpY2UgQ2xpZW50IHJlY2VpdmUgbWV0aG9kIGZvciB0aGUgY2FsbC5cbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBIG5ldyBqUXVlcnkgWEhSIG9iamVjdC5cbiAgICAgKiBAdGhyb3dzIHtzdHJpbmd9IElmIHRoZSBqUXVlcnkgdmVyc2lvbiBpcyBwcmlvciB0byAxLjUgb3IgaWYgalF1ZXJ5IGlzIG5vdCBmb3VuZC5cbiAgICAgKi9cbiAgICBqcVJlcXVlc3Q6IGZ1bmN0aW9uKGNsaWVudCwgcG9zdERhdGEsIGFyZ3MsIHJlY3ZfbWV0aG9kKSB7XG4gICAgICAgIGlmICh0eXBlb2YgalF1ZXJ5ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgdHlwZW9mIGpRdWVyeS5EZWZlcnJlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93ICdUaHJpZnQuanMgcmVxdWlyZXMgalF1ZXJ5IDEuNSsgdG8gdXNlIGFzeW5jaHJvbm91cyByZXF1ZXN0cyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGhyaWZ0VHJhbnNwb3J0ID0gdGhpcztcblxuICAgICAgICB2YXIganFYSFIgPSBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgZGF0YTogcG9zdERhdGEsXG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICd0ZXh0IHRocmlmdCcsXG4gICAgICAgICAgICBjb252ZXJ0ZXJzOiB7XG4gICAgICAgICAgICAgICAgJ3RleHQgdGhyaWZ0JyA6IGZ1bmN0aW9uKHJlc3BvbnNlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJpZnRUcmFuc3BvcnQuc2V0UmVjdkJ1ZmZlcihyZXNwb25zZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZWN2X21ldGhvZC5jYWxsKGNsaWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGV4dDogY2xpZW50LFxuICAgICAgICAgICAgc3VjY2VzczogalF1ZXJ5Lm1ha2VBcnJheShhcmdzKS5wb3AoKVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ganFYSFI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJ1ZmZlciB0byBwcm92aWRlIHRoZSBwcm90b2NvbCB3aGVuIGRlc2VyaWFsaXppbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJ1ZiAtIFRoZSBidWZmZXIgdG8gc3VwcGx5IHRoZSBwcm90b2NvbC5cbiAgICAgKi9cbiAgICBzZXRSZWN2QnVmZmVyOiBmdW5jdGlvbihidWYpIHtcbiAgICAgICAgdGhpcy5yZWN2X2J1ZiA9IGJ1ZjtcbiAgICAgICAgdGhpcy5yZWN2X2J1Zl9zeiA9IHRoaXMucmVjdl9idWYubGVuZ3RoO1xuICAgICAgICB0aGlzLndwb3MgPSB0aGlzLnJlY3ZfYnVmLmxlbmd0aDtcbiAgICAgICAgdGhpcy5ycG9zID0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0cmFuc3BvcnQgaXMgb3BlbiwgWEhSIGFsd2F5cyByZXR1cm5zIHRydWUuXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IEFsd2F5cyBUcnVlLlxuICAgICAqLyAgICBcbiAgICBpc09wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHRyYW5zcG9ydCBjb25uZWN0aW9uLCB3aXRoIFhIUiB0aGlzIGlzIGEgbm9wLlxuICAgICAqLyAgICBcbiAgICBvcGVuOiBmdW5jdGlvbigpIHt9LFxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQgY29ubmVjdGlvbiwgd2l0aCBYSFIgdGhpcyBpcyBhIG5vcC5cbiAgICAgKi8gICAgXG4gICAgY2xvc2U6IGZ1bmN0aW9uKCkge30sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgKiBidWZmZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbiAtIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQ2hhcmFjdGVycyBzZW50IGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgcmVhZDogZnVuY3Rpb24obGVuKSB7XG4gICAgICAgIHZhciBhdmFpbCA9IHRoaXMud3BvcyAtIHRoaXMucnBvcztcblxuICAgICAgICBpZiAoYXZhaWwgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnaXZlID0gbGVuO1xuXG4gICAgICAgIGlmIChhdmFpbCA8IGxlbikge1xuICAgICAgICAgICAgZ2l2ZSA9IGF2YWlsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldCA9IHRoaXMucmVhZF9idWYuc3Vic3RyKHRoaXMucnBvcywgZ2l2ZSk7XG4gICAgICAgIHRoaXMucnBvcyArPSBnaXZlO1xuXG4gICAgICAgIC8vY2xlYXIgYnVmIHdoZW4gY29tcGxldGU/XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGVudGlyZSByZXNwb25zZSBidWZmZXIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQ2hhcmFjdGVycyBzZW50IGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgcmVhZEFsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY3ZfYnVmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZW5kIGJ1ZmZlciB0byBidWYuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJ1ZiAtIFRoZSBidWZmZXIgdG8gc2VuZC5cbiAgICAgKi8gICAgXG4gICAgd3JpdGU6IGZ1bmN0aW9uKGJ1Zikge1xuICAgICAgICB0aGlzLnNlbmRfYnVmID0gYnVmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzZW5kIGJ1ZmZlci5cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2VuZCBidWZmZXIuXG4gICAgICovIFxuICAgIGdldFNlbmRCdWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kX2J1ZjtcbiAgICB9XG5cbn07XG5cblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBGdW5jdGlvbiBmb3IgdGhlIFdlYlNvY2tldCB0cmFuc3BvcnQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdXJsXSAtIFRoZSBVUkwgdG8gY29ubmVjdCB0by5cbiAqIEBjbGFzc2Rlc2MgVGhlIEFwYWNoZSBUaHJpZnQgVHJhbnNwb3J0IGxheWVyIHBlcmZvcm1zIGJ5dGUgbGV2ZWwgSS9PIFxuICogYmV0d2VlbiBSUEMgY2xpZW50cyBhbmQgc2VydmVycy4gVGhlIEphdmFTY3JpcHQgVFdlYlNvY2tldFRyYW5zcG9ydCBvYmplY3QgXG4gKiB1c2VzIHRoZSBXZWJTb2NrZXQgcHJvdG9jb2wuIFRhcmdldCBzZXJ2ZXJzIG11c3QgaW1wbGVtZW50IFdlYlNvY2tldC5cbiAqIChzZWU6IG5vZGUuanMgZXhhbXBsZSBzZXJ2ZXJfaHR0cC5qcykuXG4gKiBAZXhhbXBsZVxuICogICB2YXIgdHJhbnNwb3J0ID0gbmV3IFRocmlmdC5UV2ViU29ja2V0VHJhbnNwb3J0KFwiaHR0cDovL2xvY2FsaG9zdDo4NTg1XCIpO1xuICovXG5UaHJpZnQuVFdlYlNvY2tldFRyYW5zcG9ydCA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHRoaXMuX19yZXNldCh1cmwpO1xufTtcblxuVGhyaWZ0LlRXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlID0ge1xuICAgIF9fcmVzZXQ6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgdGhpcy51cmwgPSB1cmw7ICAgICAgICAgICAgIC8vV2hlcmUgdG8gY29ubmVjdFxuICAgICAgdGhpcy5zb2NrZXQgPSBudWxsOyAgICAgICAgIC8vVGhlIHdlYiBzb2NrZXRcbiAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107ICAgICAgICAvL1BlbmRpbmcgY2FsbGJhY2tzXG4gICAgICB0aGlzLnNlbmRfcGVuZGluZyA9IFtdOyAgICAgLy9CdWZmZXJzL0NhbGxiYWNrIHBhaXJzIHdhaXRpbmcgdG8gYmUgc2VudFxuICAgICAgdGhpcy5zZW5kX2J1ZiA9ICcnOyAgICAgICAgIC8vT3V0Ym91bmQgZGF0YSwgaW1tdXRhYmxlIHVudGlsIHNlbnRcbiAgICAgIHRoaXMucmVjdl9idWYgPSAnJzsgICAgICAgICAvL0luYm91bmQgZGF0YVxuICAgICAgdGhpcy5yYl93cG9zID0gMDsgICAgICAgICAgIC8vTmV0d29yayB3cml0ZSBwb3NpdGlvbiBpbiByZWNlaXZlIGJ1ZmZlclxuICAgICAgdGhpcy5yYl9ycG9zID0gMDsgICAgICAgICAgIC8vQ2xpZW50IHJlYWQgcG9zaXRpb24gaW4gcmVjZWl2ZSBidWZmZXJcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgdGhlIGN1cnJlbnQgV1MgcmVxdWVzdCBhbmQgcmVnaXN0ZXJzIGNhbGxiYWNrLiBUaGUgYXN5bmMgXG4gICAgICogcGFyYW1ldGVyIGlzIGlnbm9yZWQgKFdTIGZsdXNoIGlzIGFsd2F5cyBhc3luYykgYW5kIHRoZSBjYWxsYmFjayBcbiAgICAgKiBmdW5jdGlvbiBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGFzeW5jIC0gSWdub3JlZC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY2FsbGJhY2sgLSBUaGUgY2xpZW50IGNvbXBsZXRpb24gY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZHxzdHJpbmd9IE5vdGhpbmcgKHVuZGVmaW5lZCkgXG4gICAgICovXG4gICAgZmx1c2g6IGZ1bmN0aW9uKGFzeW5jLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMuaXNPcGVuKCkpIHtcbiAgICAgICAgLy9TZW5kIGRhdGEgYW5kIHJlZ2lzdGVyIGEgY2FsbGJhY2sgdG8gaW52b2tlIHRoZSBjbGllbnQgY2FsbGJhY2tcbiAgICAgICAgdGhpcy5zb2NrZXQuc2VuZCh0aGlzLnNlbmRfYnVmKTsgXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBjbGllbnRDYWxsYmFjayA9IGNhbGxiYWNrOyAgICBcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obXNnKSB7XG4gICAgICAgICAgICBzZWxmLnNldFJlY3ZCdWZmZXIobXNnKTtcbiAgICAgICAgICAgIGNsaWVudENhbGxiYWNrKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSgpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL1F1ZXVlIHRoZSBzZW5kIHRvIGdvIG91dCBfX29uT3BlblxuICAgICAgICB0aGlzLnNlbmRfcGVuZGluZy5wdXNoKHtcbiAgICAgICAgICBidWY6IHRoaXMuc2VuZF9idWYsXG4gICAgICAgICAgY2I6ICBjYWxsYmFja1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX19vbk9wZW46IGZ1bmN0aW9uKCkgeyBcbiAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgaWYgKHRoaXMuc2VuZF9wZW5kaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvL0lmIHRoZSB1c2VyIG1hZGUgY2FsbHMgYmVmb3JlIHRoZSBjb25uZWN0aW9uIHdhcyBmdWxseSBcbiAgICAgICAgICAvL29wZW4sIHNlbmQgdGhlbSBub3dcbiAgICAgICAgICB0aGlzLnNlbmRfcGVuZGluZy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKGVsZW0uYnVmKTtcbiAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5wdXNoKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgIHZhciBjbGllbnRDYWxsYmFjayA9IGVsZW0uY2I7ICAgIFxuICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG1zZykge1xuICAgICAgICAgICAgICAgICAgc2VsZi5zZXRSZWN2QnVmZmVyKG1zZyk7XG4gICAgICAgICAgICAgICAgICBjbGllbnRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9KCkpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnNlbmRfcGVuZGluZyA9IFtdO1xuICAgICAgIH1cbiAgICB9LFxuICAgIFxuICAgIF9fb25DbG9zZTogZnVuY3Rpb24oZXZ0KSB7IFxuICAgICAgdGhpcy5fX3Jlc2V0KHRoaXMudXJsKTtcbiAgICB9LFxuICAgICBcbiAgICBfX29uTWVzc2FnZTogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBpZiAodGhpcy5jYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnNoaWZ0KCkoZXZ0LmRhdGEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgIFxuICAgIF9fb25FcnJvcjogZnVuY3Rpb24oZXZ0KSB7IFxuICAgICAgY29uc29sZS5sb2coXCJUaHJpZnQgV2ViU29ja2V0IEVycm9yOiBcIiArIGV2dC50b1N0cmluZygpKTtcbiAgICAgIHRoaXMuc29ja2V0LmNsb3NlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJ1ZmZlciB0byB1c2Ugd2hlbiByZWNlaXZpbmcgc2VydmVyIHJlc3BvbnNlcy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnVmIC0gVGhlIGJ1ZmZlciB0byByZWNlaXZlIHNlcnZlciByZXNwb25zZXMuXG4gICAgICovXG4gICAgc2V0UmVjdkJ1ZmZlcjogZnVuY3Rpb24oYnVmKSB7XG4gICAgICAgIHRoaXMucmVjdl9idWYgPSBidWY7XG4gICAgICAgIHRoaXMucmVjdl9idWZfc3ogPSB0aGlzLnJlY3ZfYnVmLmxlbmd0aDtcbiAgICAgICAgdGhpcy53cG9zID0gdGhpcy5yZWN2X2J1Zi5sZW5ndGg7XG4gICAgICAgIHRoaXMucnBvcyA9IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdHJhbnNwb3J0IGlzIG9wZW5cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gXG4gICAgICovICAgIFxuICAgIGlzT3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09IHRoaXMuc29ja2V0Lk9QRU47XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSB0cmFuc3BvcnQgY29ubmVjdGlvblxuICAgICAqLyAgICBcbiAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vSWYgT1BFTi9DT05ORUNUSU5HL0NMT1NJTkcgaWdub3JlIGFkZGl0aW9uYWwgb3BlbnNcbiAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlICE9IHRoaXMuc29ja2V0LkNMT1NFRCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvL0lmIHRoZXJlIGlzIG5vIHNvY2tldCBvciB0aGUgc29ja2V0IGlzIGNsb3NlZDpcbiAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLnVybCk7XG4gICAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSB0aGlzLl9fb25PcGVuLmJpbmQodGhpcyk7IFxuICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gdGhpcy5fX29uTWVzc2FnZS5iaW5kKHRoaXMpOyBcbiAgICAgIHRoaXMuc29ja2V0Lm9uZXJyb3IgPSB0aGlzLl9fb25FcnJvci5iaW5kKHRoaXMpOyBcbiAgICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSB0aGlzLl9fb25DbG9zZS5iaW5kKHRoaXMpOyBcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQgY29ubmVjdGlvblxuICAgICAqLyAgICBcbiAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgKiBidWZmZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbiAtIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQ2hhcmFjdGVycyBzZW50IGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgcmVhZDogZnVuY3Rpb24obGVuKSB7XG4gICAgICAgIHZhciBhdmFpbCA9IHRoaXMud3BvcyAtIHRoaXMucnBvcztcblxuICAgICAgICBpZiAoYXZhaWwgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnaXZlID0gbGVuO1xuXG4gICAgICAgIGlmIChhdmFpbCA8IGxlbikge1xuICAgICAgICAgICAgZ2l2ZSA9IGF2YWlsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldCA9IHRoaXMucmVhZF9idWYuc3Vic3RyKHRoaXMucnBvcywgZ2l2ZSk7XG4gICAgICAgIHRoaXMucnBvcyArPSBnaXZlO1xuXG4gICAgICAgIC8vY2xlYXIgYnVmIHdoZW4gY29tcGxldGU/XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGVudGlyZSByZXNwb25zZSBidWZmZXIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQ2hhcmFjdGVycyBzZW50IGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgcmVhZEFsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY3ZfYnVmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZW5kIGJ1ZmZlciB0byBidWYuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJ1ZiAtIFRoZSBidWZmZXIgdG8gc2VuZC5cbiAgICAgKi8gICAgXG4gICAgd3JpdGU6IGZ1bmN0aW9uKGJ1Zikge1xuICAgICAgICB0aGlzLnNlbmRfYnVmID0gYnVmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzZW5kIGJ1ZmZlci5cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2VuZCBidWZmZXIuXG4gICAgICovIFxuICAgIGdldFNlbmRCdWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kX2J1ZjtcbiAgICB9XG5cbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBUaHJpZnQgSlNPTiBwcm90b2NvbCBpbnN0YW5jZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtUaHJpZnQuVHJhbnNwb3J0fSB0cmFuc3BvcnQgLSBUaGUgdHJhbnNwb3J0IHRvIHNlcmlhbGl6ZSB0by9mcm9tLlxuICogQGNsYXNzZGVzYyBBcGFjaGUgVGhyaWZ0IFByb3RvY29scyBwZXJmb3JtIHNlcmlhbGl6YXRpb24gd2hpY2ggZW5hYmxlcyBjcm9zcyBcbiAqIGxhbmd1YWdlIFJQQy4gVGhlIFByb3RvY29sIHR5cGUgaXMgdGhlIEphdmFTY3JpcHQgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBcbiAqIG9mIHRoZSBBcGFjaGUgVGhyaWZ0IFRKU09OUHJvdG9jb2wuXG4gKiBAZXhhbXBsZVxuICogICAgIHZhciBwcm90b2NvbCAgPSBuZXcgVGhyaWZ0LlByb3RvY29sKHRyYW5zcG9ydCk7XG4gKi9cblRocmlmdC5USlNPTlByb3RvY29sID0gVGhyaWZ0LlByb3RvY29sID0gZnVuY3Rpb24odHJhbnNwb3J0KSB7XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG59O1xuXG4vKipcbiAqIFRocmlmdCBJREwgdHlwZSBJZCB0byBzdHJpbmcgbWFwcGluZy5cbiAqIEByZWFkb25seVxuICogQHNlZSB7QGxpbmsgVGhyaWZ0LlR5cGV9XG4gKi9cblRocmlmdC5Qcm90b2NvbC5UeXBlID0ge307XG5UaHJpZnQuUHJvdG9jb2wuVHlwZVtUaHJpZnQuVHlwZS5CT09MXSA9ICdcInRmXCInO1xuVGhyaWZ0LlByb3RvY29sLlR5cGVbVGhyaWZ0LlR5cGUuQllURV0gPSAnXCJpOFwiJztcblRocmlmdC5Qcm90b2NvbC5UeXBlW1RocmlmdC5UeXBlLkkxNl0gPSAnXCJpMTZcIic7XG5UaHJpZnQuUHJvdG9jb2wuVHlwZVtUaHJpZnQuVHlwZS5JMzJdID0gJ1wiaTMyXCInO1xuVGhyaWZ0LlByb3RvY29sLlR5cGVbVGhyaWZ0LlR5cGUuSTY0XSA9ICdcImk2NFwiJztcblRocmlmdC5Qcm90b2NvbC5UeXBlW1RocmlmdC5UeXBlLkRPVUJMRV0gPSAnXCJkYmxcIic7XG5UaHJpZnQuUHJvdG9jb2wuVHlwZVtUaHJpZnQuVHlwZS5TVFJVQ1RdID0gJ1wicmVjXCInO1xuVGhyaWZ0LlByb3RvY29sLlR5cGVbVGhyaWZ0LlR5cGUuU1RSSU5HXSA9ICdcInN0clwiJztcblRocmlmdC5Qcm90b2NvbC5UeXBlW1RocmlmdC5UeXBlLk1BUF0gPSAnXCJtYXBcIic7XG5UaHJpZnQuUHJvdG9jb2wuVHlwZVtUaHJpZnQuVHlwZS5MSVNUXSA9ICdcImxzdFwiJztcblRocmlmdC5Qcm90b2NvbC5UeXBlW1RocmlmdC5UeXBlLlNFVF0gPSAnXCJzZXRcIic7XG5cbi8qKlxuICogVGhyaWZ0IElETCB0eXBlIHN0cmluZyB0byBJZCBtYXBwaW5nLlxuICogQHJlYWRvbmx5XG4gKiBAc2VlIHtAbGluayBUaHJpZnQuVHlwZX1cbiAqL1xuVGhyaWZ0LlByb3RvY29sLlJUeXBlID0ge307XG5UaHJpZnQuUHJvdG9jb2wuUlR5cGUudGYgPSBUaHJpZnQuVHlwZS5CT09MO1xuVGhyaWZ0LlByb3RvY29sLlJUeXBlLmk4ID0gVGhyaWZ0LlR5cGUuQllURTtcblRocmlmdC5Qcm90b2NvbC5SVHlwZS5pMTYgPSBUaHJpZnQuVHlwZS5JMTY7XG5UaHJpZnQuUHJvdG9jb2wuUlR5cGUuaTMyID0gVGhyaWZ0LlR5cGUuSTMyO1xuVGhyaWZ0LlByb3RvY29sLlJUeXBlLmk2NCA9IFRocmlmdC5UeXBlLkk2NDtcblRocmlmdC5Qcm90b2NvbC5SVHlwZS5kYmwgPSBUaHJpZnQuVHlwZS5ET1VCTEU7XG5UaHJpZnQuUHJvdG9jb2wuUlR5cGUucmVjID0gVGhyaWZ0LlR5cGUuU1RSVUNUO1xuVGhyaWZ0LlByb3RvY29sLlJUeXBlLnN0ciA9IFRocmlmdC5UeXBlLlNUUklORztcblRocmlmdC5Qcm90b2NvbC5SVHlwZS5tYXAgPSBUaHJpZnQuVHlwZS5NQVA7XG5UaHJpZnQuUHJvdG9jb2wuUlR5cGUubHN0ID0gVGhyaWZ0LlR5cGUuTElTVDtcblRocmlmdC5Qcm90b2NvbC5SVHlwZS5zZXQgPSBUaHJpZnQuVHlwZS5TRVQ7XG5cbi8qKlxuICogVGhlIFRKU09OUHJvdG9jb2wgdmVyc2lvbiBudW1iZXIuXG4gKiBAcmVhZG9ubHlcbiAqIEBjb25zdCB7bnVtYmVyfSBWZXJzaW9uXG4gKiBAbWVtYmVyb2YgVGhyaWZ0LlByb3RvY29sXG4gKi9cbiBUaHJpZnQuUHJvdG9jb2wuVmVyc2lvbiA9IDE7XG5cblRocmlmdC5Qcm90b2NvbC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQuXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHJldHVybnMge1RocmlmdC5UcmFuc3BvcnR9IFRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydC5cbiAgICAgKi8gXG4gICAgZ2V0VHJhbnNwb3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBiZWdpbm5pbmcgb2YgYSBUaHJpZnQgUlBDIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgc2VydmljZSBtZXRob2QgdG8gY2FsbC5cbiAgICAgKiBAcGFyYW0ge1RocmlmdC5NZXNzYWdlVHlwZX0gbWVzc2FnZVR5cGUgLSBUaGUgdHlwZSBvZiBtZXRob2QgY2FsbC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2VxaWQgLSBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgY2FsbCAoYWx3YXlzIDAgaW4gQXBhY2hlIFRocmlmdCkuXG4gICAgICovXG4gICAgd3JpdGVNZXNzYWdlQmVnaW46IGZ1bmN0aW9uKG5hbWUsIG1lc3NhZ2VUeXBlLCBzZXFpZCkge1xuICAgICAgICB0aGlzLnRzdGFjayA9IFtdO1xuICAgICAgICB0aGlzLnRwb3MgPSBbXTtcblxuICAgICAgICB0aGlzLnRzdGFjay5wdXNoKFtUaHJpZnQuUHJvdG9jb2wuVmVyc2lvbiwgJ1wiJyArXG4gICAgICAgICAgICBuYW1lICsgJ1wiJywgbWVzc2FnZVR5cGUsIHNlcWlkXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIFRocmlmdCBSUEMgbWVzc2FnZS5cbiAgICAgKi9cbiAgICB3cml0ZU1lc3NhZ2VFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb2JqID0gdGhpcy50c3RhY2sucG9wKCk7XG5cbiAgICAgICAgdGhpcy53b2JqID0gdGhpcy50c3RhY2sucG9wKCk7XG4gICAgICAgIHRoaXMud29iai5wdXNoKG9iaik7XG5cbiAgICAgICAgdGhpcy53YnVmID0gJ1snICsgdGhpcy53b2JqLmpvaW4oJywnKSArICddJztcblxuICAgICAgICB0aGlzLnRyYW5zcG9ydC53cml0ZSh0aGlzLndidWYpO1xuICAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBiZWdpbm5pbmcgb2YgYSBzdHJ1Y3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgc3RydWN0LlxuICAgICAqL1xuICAgIHdyaXRlU3RydWN0QmVnaW46IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy50cG9zLnB1c2godGhpcy50c3RhY2subGVuZ3RoKTtcbiAgICAgICAgdGhpcy50c3RhY2sucHVzaCh7fSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIHN0cnVjdC5cbiAgICAgKi9cbiAgICB3cml0ZVN0cnVjdEVuZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHAgPSB0aGlzLnRwb3MucG9wKCk7XG4gICAgICAgIHZhciBzdHJ1Y3QgPSB0aGlzLnRzdGFja1twXTtcbiAgICAgICAgdmFyIHN0ciA9ICd7JztcbiAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHN0cnVjdCkge1xuICAgICAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyICs9ICcsJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RyICs9IGtleSArICc6JyArIHN0cnVjdFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RyICs9ICd9JztcbiAgICAgICAgdGhpcy50c3RhY2tbcF0gPSBzdHI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGJlZ2lubmluZyBvZiBhIHN0cnVjdCBmaWVsZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBmaWVsZC5cbiAgICAgKiBAcGFyYW0ge1RocmlmdC5Qcm90b2NvbC5UeXBlfSBmaWVsZFR5cGUgLSBUaGUgZGF0YSB0eXBlIG9mIHRoZSBmaWVsZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmllbGRJZCAtIFRoZSBmaWVsZCdzIHVuaXF1ZSBpZGVudGlmaWVyLlxuICAgICAqL1xuICAgIHdyaXRlRmllbGRCZWdpbjogZnVuY3Rpb24obmFtZSwgZmllbGRUeXBlLCBmaWVsZElkKSB7XG4gICAgICAgIHRoaXMudHBvcy5wdXNoKHRoaXMudHN0YWNrLmxlbmd0aCk7XG4gICAgICAgIHRoaXMudHN0YWNrLnB1c2goeyAnZmllbGRJZCc6ICdcIicgK1xuICAgICAgICAgICAgZmllbGRJZCArICdcIicsICdmaWVsZFR5cGUnOiBUaHJpZnQuUHJvdG9jb2wuVHlwZVtmaWVsZFR5cGVdXG4gICAgICAgIH0pO1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIGZpZWxkLlxuICAgICAqL1xuICAgIHdyaXRlRmllbGRFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnRzdGFjay5wb3AoKTtcbiAgICAgICAgdmFyIGZpZWxkSW5mbyA9IHRoaXMudHN0YWNrLnBvcCgpO1xuXG4gICAgICAgIHRoaXMudHN0YWNrW3RoaXMudHN0YWNrLmxlbmd0aCAtIDFdW2ZpZWxkSW5mby5maWVsZElkXSA9ICd7JyArXG4gICAgICAgICAgICBmaWVsZEluZm8uZmllbGRUeXBlICsgJzonICsgdmFsdWUgKyAnfSc7XG4gICAgICAgIHRoaXMudHBvcy5wb3AoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgZW5kIG9mIHRoZSBzZXQgb2YgZmllbGRzIGZvciBhIHN0cnVjdC5cbiAgICAgKi9cbiAgICB3cml0ZUZpZWxkU3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vbmFcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgYmVnaW5uaW5nIG9mIGEgbWFwIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtUaHJpZnQuVHlwZX0ga2V5VHlwZSAtIFRoZSBkYXRhIHR5cGUgb2YgdGhlIGtleS5cbiAgICAgKiBAcGFyYW0ge1RocmlmdC5UeXBlfSB2YWxUeXBlIC0gVGhlIGRhdGEgdHlwZSBvZiB0aGUgdmFsdWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplXSAtIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIG1hcCAoaWdub3JlZCkuXG4gICAgICovXG4gICAgd3JpdGVNYXBCZWdpbjogZnVuY3Rpb24oa2V5VHlwZSwgdmFsVHlwZSwgc2l6ZSkge1xuICAgICAgICB0aGlzLnRwb3MucHVzaCh0aGlzLnRzdGFjay5sZW5ndGgpO1xuICAgICAgICB0aGlzLnRzdGFjay5wdXNoKFtUaHJpZnQuUHJvdG9jb2wuVHlwZVtrZXlUeXBlXSxcbiAgICAgICAgICAgIFRocmlmdC5Qcm90b2NvbC5UeXBlW3ZhbFR5cGVdLCAwXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIG1hcC5cbiAgICAgKi9cbiAgICB3cml0ZU1hcEVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwID0gdGhpcy50cG9zLnBvcCgpO1xuXG4gICAgICAgIGlmIChwID09IHRoaXMudHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh0aGlzLnRzdGFjay5sZW5ndGggLSBwIC0gMSkgJSAyICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnRzdGFjay5wdXNoKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaXplID0gKHRoaXMudHN0YWNrLmxlbmd0aCAtIHAgLSAxKSAvIDI7XG5cbiAgICAgICAgdGhpcy50c3RhY2tbcF1bdGhpcy50c3RhY2tbcF0ubGVuZ3RoIC0gMV0gPSBzaXplO1xuXG4gICAgICAgIHZhciBtYXAgPSAnfSc7XG4gICAgICAgIHZhciBmaXJzdCA9IHRydWU7XG4gICAgICAgIHdoaWxlICh0aGlzLnRzdGFjay5sZW5ndGggPiBwICsgMSkge1xuICAgICAgICAgICAgdmFyIHYgPSB0aGlzLnRzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIHZhciBrID0gdGhpcy50c3RhY2sucG9wKCk7XG4gICAgICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXAgPSAnLCcgKyBtYXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghIGlzTmFOKGspKSB7IGsgPSAnXCInICsgayArICdcIic7IH0gLy9qc29uIFwia2V5c1wiIG5lZWQgdG8gYmUgc3RyaW5nc1xuICAgICAgICAgICAgbWFwID0gayArICc6JyArIHYgKyBtYXA7XG4gICAgICAgIH1cbiAgICAgICAgbWFwID0gJ3snICsgbWFwO1xuXG4gICAgICAgIHRoaXMudHN0YWNrW3BdLnB1c2gobWFwKTtcbiAgICAgICAgdGhpcy50c3RhY2tbcF0gPSAnWycgKyB0aGlzLnRzdGFja1twXS5qb2luKCcsJykgKyAnXSc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGJlZ2lubmluZyBvZiBhIGxpc3QgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge1RocmlmdC5UeXBlfSBlbGVtVHlwZSAtIFRoZSBkYXRhIHR5cGUgb2YgdGhlIGVsZW1lbnRzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gVGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICB3cml0ZUxpc3RCZWdpbjogZnVuY3Rpb24oZWxlbVR5cGUsIHNpemUpIHtcbiAgICAgICAgdGhpcy50cG9zLnB1c2godGhpcy50c3RhY2subGVuZ3RoKTtcbiAgICAgICAgdGhpcy50c3RhY2sucHVzaChbVGhyaWZ0LlByb3RvY29sLlR5cGVbZWxlbVR5cGVdLCBzaXplXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIGxpc3QuXG4gICAgICovXG4gICAgd3JpdGVMaXN0RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLnRwb3MucG9wKCk7XG5cbiAgICAgICAgd2hpbGUgKHRoaXMudHN0YWNrLmxlbmd0aCA+IHAgKyAxKSB7XG4gICAgICAgICAgICB2YXIgdG1wVmFsID0gdGhpcy50c3RhY2tbcCArIDFdO1xuICAgICAgICAgICAgdGhpcy50c3RhY2suc3BsaWNlKHAgKyAxLCAxKTtcbiAgICAgICAgICAgIHRoaXMudHN0YWNrW3BdLnB1c2godG1wVmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHN0YWNrW3BdID0gJ1snICsgdGhpcy50c3RhY2tbcF0uam9pbignLCcpICsgJ10nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBiZWdpbm5pbmcgb2YgYSBzZXQgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge1RocmlmdC5UeXBlfSBlbGVtVHlwZSAtIFRoZSBkYXRhIHR5cGUgb2YgdGhlIGVsZW1lbnRzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gVGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICB3cml0ZVNldEJlZ2luOiBmdW5jdGlvbihlbGVtVHlwZSwgc2l6ZSkge1xuICAgICAgICB0aGlzLnRwb3MucHVzaCh0aGlzLnRzdGFjay5sZW5ndGgpO1xuICAgICAgICB0aGlzLnRzdGFjay5wdXNoKFtUaHJpZnQuUHJvdG9jb2wuVHlwZVtlbGVtVHlwZV0sIHNpemVdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgZW5kIG9mIGEgc2V0LlxuICAgICAqL1xuICAgIHdyaXRlU2V0RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLnRwb3MucG9wKCk7XG5cbiAgICAgICAgd2hpbGUgKHRoaXMudHN0YWNrLmxlbmd0aCA+IHAgKyAxKSB7XG4gICAgICAgICAgICB2YXIgdG1wVmFsID0gdGhpcy50c3RhY2tbcCArIDFdO1xuICAgICAgICAgICAgdGhpcy50c3RhY2suc3BsaWNlKHAgKyAxLCAxKTtcbiAgICAgICAgICAgIHRoaXMudHN0YWNrW3BdLnB1c2godG1wVmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHN0YWNrW3BdID0gJ1snICsgdGhpcy50c3RhY2tbcF0uam9pbignLCcpICsgJ10nO1xuICAgIH0sXG5cbiAgICAvKiogU2VyaWFsaXplcyBhIGJvb2xlYW4gKi9cbiAgICB3cml0ZUJvb2w6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudHN0YWNrLnB1c2godmFsdWUgPyAxIDogMCk7XG4gICAgfSxcblxuICAgIC8qKiBTZXJpYWxpemVzIGEgbnVtYmVyICovXG4gICAgd3JpdGVCeXRlOiBmdW5jdGlvbihpOCkge1xuICAgICAgICB0aGlzLnRzdGFjay5wdXNoKGk4KTtcbiAgICB9LFxuXG4gICAgLyoqIFNlcmlhbGl6ZXMgYSBudW1iZXIgKi9cbiAgICB3cml0ZUkxNjogZnVuY3Rpb24oaTE2KSB7XG4gICAgICAgIHRoaXMudHN0YWNrLnB1c2goaTE2KTtcbiAgICB9LFxuXG4gICAgLyoqIFNlcmlhbGl6ZXMgYSBudW1iZXIgKi9cbiAgICB3cml0ZUkzMjogZnVuY3Rpb24oaTMyKSB7XG4gICAgICAgIHRoaXMudHN0YWNrLnB1c2goaTMyKTtcbiAgICB9LFxuXG4gICAgLyoqIFNlcmlhbGl6ZXMgYSBudW1iZXIgKi9cbiAgICB3cml0ZUk2NDogZnVuY3Rpb24oaTY0KSB7XG4gICAgICAgIHRoaXMudHN0YWNrLnB1c2goaTY0KTtcbiAgICB9LFxuXG4gICAgLyoqIFNlcmlhbGl6ZXMgYSBudW1iZXIgKi9cbiAgICB3cml0ZURvdWJsZTogZnVuY3Rpb24oZGJsKSB7XG4gICAgICAgIHRoaXMudHN0YWNrLnB1c2goZGJsKTtcbiAgICB9LFxuXG4gICAgLyoqIFNlcmlhbGl6ZXMgYSBzdHJpbmcgKi9cbiAgICB3cml0ZVN0cmluZzogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIC8vIFdlIGRvIG5vdCBlbmNvZGUgdXJpIGNvbXBvbmVudHMgZm9yIHdpcmUgdHJhbnNmZXI6XG4gICAgICAgIGlmIChzdHIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudHN0YWNrLnB1c2gobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjb25jYXQgbWF5IGJlIHNsb3dlciB0aGFuIGJ1aWxkaW5nIGEgYnl0ZSBidWZmZXJcbiAgICAgICAgICAgIHZhciBlc2NhcGVkU3RyaW5nID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjaCA9IHN0ci5jaGFyQXQoaSk7ICAgICAgLy8gYSBzaW5nbGUgZG91YmxlIHF1b3RlOiBcIlxuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcXCInKSB7XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWRTdHJpbmcgKz0gJ1xcXFxcXFwiJzsgLy8gd3JpdGUgb3V0IGFzOiBcXFwiXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7ICAgIC8vIGEgc2luZ2xlIGJhY2tzbGFzaFxuICAgICAgICAgICAgICAgICAgICBlc2NhcGVkU3RyaW5nICs9ICdcXFxcXFxcXCc7IC8vIHdyaXRlIG91dCBhcyBkb3VibGUgYmFja3NsYXNoIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXGInKSB7ICAgIC8vIGEgc2luZ2xlIGJhY2tzcGFjZTogaW52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWRTdHJpbmcgKz0gJ1xcXFxiJzsgIC8vIHdyaXRlIG91dCBhczogXFxiXCJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAnXFxmJykgeyAgICAvLyBhIHNpbmdsZSBmb3JtZmVlZDogaW52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWRTdHJpbmcgKz0gJ1xcXFxmJzsgIC8vIHdyaXRlIG91dCBhczogXFxmXCJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAnXFxuJykgeyAgICAvLyBhIHNpbmdsZSBuZXdsaW5lOiBpbnZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZFN0cmluZyArPSAnXFxcXG4nOyAgLy8gd3JpdGUgb3V0IGFzOiBcXG5cIlxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXHInKSB7ICAgIC8vIGEgc2luZ2xlIHJldHVybjogaW52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWRTdHJpbmcgKz0gJ1xcXFxyJzsgIC8vIHdyaXRlIG91dCBhczogXFxyXCJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAnXFx0JykgeyAgICAvLyBhIHNpbmdsZSB0YWI6IGludmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICBlc2NhcGVkU3RyaW5nICs9ICdcXFxcdCc7ICAvLyB3cml0ZSBvdXQgYXM6IFxcdFwiXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZFN0cmluZyArPSBjaDsgICAgIC8vIEVsc2UgaXQgbmVlZCBub3QgYmUgZXNjYXBlZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudHN0YWNrLnB1c2goJ1wiJyArIGVzY2FwZWRTdHJpbmcgKyAnXCInKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogU2VyaWFsaXplcyBhIHN0cmluZyAqL1xuICAgIHdyaXRlQmluYXJ5OiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgdGhpcy53cml0ZVN0cmluZyhzdHIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICBAY2xhc3NcbiAgICAgICBAbmFtZSBBbm9uUmVhZE1lc3NhZ2VCZWdpblJldHVyblxuICAgICAgIEBwcm9wZXJ0eSB7c3RyaW5nfSBmbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIG1ldGhvZC5cbiAgICAgICBAcHJvcGVydHkge1RocmlmdC5NZXNzYWdlVHlwZX0gbXR5cGUgLSBUaGUgdHlwZSBvZiBtZXNzYWdlIGNhbGwuXG4gICAgICAgQHByb3BlcnR5IHtudW1iZXJ9IHJzZXFpZCAtIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIG1lc3NhZ2UgKDAgaW4gVGhyaWZ0IFJQQykuXG4gICAgICovXG4gICAgLyoqIFxuICAgICAqIERlc2VyaWFsaXplcyB0aGUgYmVnaW5uaW5nIG9mIGEgbWVzc2FnZS4gXG4gICAgICogQHJldHVybnMge0Fub25SZWFkTWVzc2FnZUJlZ2luUmV0dXJufVxuICAgICAqL1xuICAgIHJlYWRNZXNzYWdlQmVnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJzdGFjayA9IFtdO1xuICAgICAgICB0aGlzLnJwb3MgPSBbXTtcblxuICAgICAgICBpZiAodHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBKU09OLnBhcnNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnJvYmogPSBKU09OLnBhcnNlKHRoaXMudHJhbnNwb3J0LnJlYWRBbGwoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpRdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMucm9iaiA9IGpRdWVyeS5wYXJzZUpTT04odGhpcy50cmFuc3BvcnQucmVhZEFsbCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucm9iaiA9IGV2YWwodGhpcy50cmFuc3BvcnQucmVhZEFsbCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByID0ge307XG4gICAgICAgIHZhciB2ZXJzaW9uID0gdGhpcy5yb2JqLnNoaWZ0KCk7XG5cbiAgICAgICAgaWYgKHZlcnNpb24gIT0gVGhyaWZ0LlByb3RvY29sLlZlcnNpb24pIHtcbiAgICAgICAgICAgIHRocm93ICdXcm9uZyB0aHJpZnQgcHJvdG9jb2wgdmVyc2lvbjogJyArIHZlcnNpb247XG4gICAgICAgIH1cblxuICAgICAgICByLmZuYW1lID0gdGhpcy5yb2JqLnNoaWZ0KCk7XG4gICAgICAgIHIubXR5cGUgPSB0aGlzLnJvYmouc2hpZnQoKTtcbiAgICAgICAgci5yc2VxaWQgPSB0aGlzLnJvYmouc2hpZnQoKTtcblxuXG4gICAgICAgIC8vZ2V0IHRvIHRoZSBtYWluIG9ialxuICAgICAgICB0aGlzLnJzdGFjay5wdXNoKHRoaXMucm9iai5zaGlmdCgpKTtcblxuICAgICAgICByZXR1cm4gcjtcbiAgICB9LFxuXG4gICAgLyoqIERlc2VyaWFsaXplcyB0aGUgZW5kIG9mIGEgbWVzc2FnZS4gKi9cbiAgICByZWFkTWVzc2FnZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgfSxcblxuICAgIC8qKiBcbiAgICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGJlZ2lubmluZyBvZiBhIHN0cnVjdC4gXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSAtIFRoZSBuYW1lIG9mIHRoZSBzdHJ1Y3QgKGlnbm9yZWQpXG4gICAgICogQHJldHVybnMge29iamVjdH0gLSBBbiBvYmplY3Qgd2l0aCBhbiBlbXB0eSBzdHJpbmcgZm5hbWUgcHJvcGVydHlcbiAgICAgKi8gICAgXG4gICAgcmVhZFN0cnVjdEJlZ2luOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHZhciByID0ge307XG4gICAgICAgIHIuZm5hbWUgPSAnJztcblxuICAgICAgICAvL2luY2FzZSB0aGlzIGlzIGFuIGFycmF5IG9mIHN0cnVjdHNcbiAgICAgICAgaWYgKHRoaXMucnN0YWNrW3RoaXMucnN0YWNrLmxlbmd0aCAtIDFdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMucnN0YWNrLnB1c2godGhpcy5yc3RhY2tbdGhpcy5yc3RhY2subGVuZ3RoIC0gMV0uc2hpZnQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcjtcbiAgICB9LFxuXG4gICAgLyoqIERlc2VyaWFsaXplcyB0aGUgZW5kIG9mIGEgc3RydWN0LiAqL1xuICAgIHJlYWRTdHJ1Y3RFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5yc3RhY2tbdGhpcy5yc3RhY2subGVuZ3RoIC0gMl0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdGhpcy5yc3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgQGNsYXNzXG4gICAgICAgQG5hbWUgQW5vblJlYWRGaWVsZEJlZ2luUmV0dXJuXG4gICAgICAgQHByb3BlcnR5IHtzdHJpbmd9IGZuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpZWxkIChhbHdheXMgJycpLlxuICAgICAgIEBwcm9wZXJ0eSB7VGhyaWZ0LlR5cGV9IGZ0eXBlIC0gVGhlIGRhdGEgdHlwZSBvZiB0aGUgZmllbGQuXG4gICAgICAgQHByb3BlcnR5IHtudW1iZXJ9IGZpZCAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgZmllbGQuXG4gICAgICovXG4gICAgLyoqIFxuICAgICAqIERlc2VyaWFsaXplcyB0aGUgYmVnaW5uaW5nIG9mIGEgZmllbGQuIFxuICAgICAqIEByZXR1cm5zIHtBbm9uUmVhZEZpZWxkQmVnaW5SZXR1cm59XG4gICAgICovXG4gICAgcmVhZEZpZWxkQmVnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgciA9IHt9O1xuXG4gICAgICAgIHZhciBmaWQgPSAtMTtcbiAgICAgICAgdmFyIGZ0eXBlID0gVGhyaWZ0LlR5cGUuU1RPUDtcblxuICAgICAgICAvL2dldCBhIGZpZWxkSWRcbiAgICAgICAgZm9yICh2YXIgZiBpbiAodGhpcy5yc3RhY2tbdGhpcy5yc3RhY2subGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICBpZiAoZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlkID0gcGFyc2VJbnQoZiwgMTApO1xuICAgICAgICAgICAgdGhpcy5ycG9zLnB1c2godGhpcy5yc3RhY2subGVuZ3RoKTtcblxuICAgICAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5yc3RhY2tbdGhpcy5yc3RhY2subGVuZ3RoIC0gMV1bZmlkXTtcblxuICAgICAgICAgICAgLy9yZW1vdmUgc28gd2UgZG9uJ3Qgc2VlIGl0IGFnYWluXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5yc3RhY2tbdGhpcy5yc3RhY2subGVuZ3RoIC0gMV1bZmlkXTtcblxuICAgICAgICAgICAgdGhpcy5yc3RhY2sucHVzaChmaWVsZCk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZCAhPSAtMSkge1xuXG4gICAgICAgICAgICAvL3Nob3VsZCBvbmx5IGJlIDEgb2YgdGhlc2UgYnV0IHRoaXMgaXMgdGhlIG9ubHlcbiAgICAgICAgICAgIC8vd2F5IHRvIG1hdGNoIGEga2V5XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluICh0aGlzLnJzdGFja1t0aGlzLnJzdGFjay5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoVGhyaWZ0LlByb3RvY29sLlJUeXBlW2ldID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ0eXBlID0gVGhyaWZ0LlByb3RvY29sLlJUeXBlW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMucnN0YWNrW3RoaXMucnN0YWNrLmxlbmd0aCAtIDFdID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yc3RhY2tbdGhpcy5yc3RhY2subGVuZ3RoIC0gMV1baV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByLmZuYW1lID0gJyc7XG4gICAgICAgIHIuZnR5cGUgPSBmdHlwZTtcbiAgICAgICAgci5maWQgPSBmaWQ7XG5cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfSxcblxuICAgIC8qKiBEZXNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIGZpZWxkLiAqL1xuICAgIHJlYWRGaWVsZEVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLnJwb3MucG9wKCk7XG5cbiAgICAgICAgLy9nZXQgYmFjayB0byB0aGUgcmlnaHQgcGxhY2UgaW4gdGhlIHN0YWNrXG4gICAgICAgIHdoaWxlICh0aGlzLnJzdGFjay5sZW5ndGggPiBwb3MpIHtcbiAgICAgICAgICAgIHRoaXMucnN0YWNrLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgQGNsYXNzXG4gICAgICAgQG5hbWUgQW5vblJlYWRNYXBCZWdpblJldHVyblxuICAgICAgIEBwcm9wZXJ0eSB7VGhyaWZ0LlR5cGV9IGt0eXBlIC0gVGhlIGRhdGEgdHlwZSBvZiB0aGUga2V5LlxuICAgICAgIEBwcm9wZXJ0eSB7VGhyaWZ0LlR5cGV9IHZ0eXBlIC0gVGhlIGRhdGEgdHlwZSBvZiB0aGUgdmFsdWUuXG4gICAgICAgQHByb3BlcnR5IHtudW1iZXJ9IHNpemUgLSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBtYXAuXG4gICAgICovXG4gICAgLyoqIFxuICAgICAqIERlc2VyaWFsaXplcyB0aGUgYmVnaW5uaW5nIG9mIGEgbWFwLiBcbiAgICAgKiBAcmV0dXJucyB7QW5vblJlYWRNYXBCZWdpblJldHVybn1cbiAgICAgKi9cbiAgICByZWFkTWFwQmVnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbWFwID0gdGhpcy5yc3RhY2sucG9wKCk7XG4gICAgICAgIHZhciBmaXJzdCA9IG1hcC5zaGlmdCgpO1xuICAgICAgICBpZiAoZmlyc3QgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIHRoaXMucnN0YWNrLnB1c2gobWFwKTtcbiAgICAgICAgICBtYXAgPSBmaXJzdDtcbiAgICAgICAgICBmaXJzdCA9IG1hcC5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHIgPSB7fTtcbiAgICAgICAgci5rdHlwZSA9IFRocmlmdC5Qcm90b2NvbC5SVHlwZVtmaXJzdF07XG4gICAgICAgIHIudnR5cGUgPSBUaHJpZnQuUHJvdG9jb2wuUlR5cGVbbWFwLnNoaWZ0KCldO1xuICAgICAgICByLnNpemUgPSBtYXAuc2hpZnQoKTtcblxuXG4gICAgICAgIHRoaXMucnBvcy5wdXNoKHRoaXMucnN0YWNrLmxlbmd0aCk7XG4gICAgICAgIHRoaXMucnN0YWNrLnB1c2gobWFwLnNoaWZ0KCkpO1xuXG4gICAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKiogRGVzZXJpYWxpemVzIHRoZSBlbmQgb2YgYSBtYXAuICovXG4gICAgcmVhZE1hcEVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVhZEZpZWxkRW5kKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgIEBjbGFzc1xuICAgICAgIEBuYW1lIEFub25SZWFkQ29sQmVnaW5SZXR1cm5cbiAgICAgICBAcHJvcGVydHkge1RocmlmdC5UeXBlfSBldHlwZSAtIFRoZSBkYXRhIHR5cGUgb2YgdGhlIGVsZW1lbnQuXG4gICAgICAgQHByb3BlcnR5IHtudW1iZXJ9IHNpemUgLSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIC8qKiBcbiAgICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGJlZ2lubmluZyBvZiBhIGxpc3QuIFxuICAgICAqIEByZXR1cm5zIHtBbm9uUmVhZENvbEJlZ2luUmV0dXJufVxuICAgICAqL1xuICAgIHJlYWRMaXN0QmVnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbGlzdCA9IHRoaXMucnN0YWNrW3RoaXMucnN0YWNrLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIHZhciByID0ge307XG4gICAgICAgIHIuZXR5cGUgPSBUaHJpZnQuUHJvdG9jb2wuUlR5cGVbbGlzdC5zaGlmdCgpXTtcbiAgICAgICAgci5zaXplID0gbGlzdC5zaGlmdCgpO1xuXG4gICAgICAgIHRoaXMucnBvcy5wdXNoKHRoaXMucnN0YWNrLmxlbmd0aCk7XG4gICAgICAgIHRoaXMucnN0YWNrLnB1c2gobGlzdCk7XG5cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfSxcblxuICAgIC8qKiBEZXNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIGxpc3QuICovXG4gICAgcmVhZExpc3RFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlYWRGaWVsZEVuZCgpO1xuICAgIH0sXG5cbiAgICAvKiogXG4gICAgICogRGVzZXJpYWxpemVzIHRoZSBiZWdpbm5pbmcgb2YgYSBzZXQuIFxuICAgICAqIEByZXR1cm5zIHtBbm9uUmVhZENvbEJlZ2luUmV0dXJufVxuICAgICAqL1xuICAgIHJlYWRTZXRCZWdpbjogZnVuY3Rpb24oZWxlbVR5cGUsIHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZExpc3RCZWdpbihlbGVtVHlwZSwgc2l6ZSk7XG4gICAgfSxcblxuICAgIC8qKiBEZXNlcmlhbGl6ZXMgdGhlIGVuZCBvZiBhIHNldC4gKi9cbiAgICByZWFkU2V0RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZExpc3RFbmQoKTtcbiAgICB9LFxuXG4gICAgLyoqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggYSB2YWx1ZSBwcm9wZXJ0eSBzZXQgdG8gXG4gICAgICogIEZhbHNlIHVubGVzcyB0aGUgbmV4dCBudW1iZXIgaW4gdGhlIHByb3RvY29sIGJ1ZmZlciBcbiAgICAgKiAgaXMgMSwgaW4gd2hpY2ggY2FzZSB0ZWggdmFsdWUgcHJvcGVydHkgaXMgVHJ1ZSAqL1xuICAgIHJlYWRCb29sOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnJlYWRJMzIoKTtcblxuICAgICAgICBpZiAociAhPT0gbnVsbCAmJiByLnZhbHVlID09ICcxJykge1xuICAgICAgICAgICAgci52YWx1ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcjtcbiAgICB9LFxuXG4gICAgLyoqIFJldHVybnMgdGhlIGFuIG9iamVjdCB3aXRoIGEgdmFsdWUgcHJvcGVydHkgc2V0IHRvIHRoZSBcbiAgICAgICAgbmV4dCB2YWx1ZSBmb3VuZCBpbiB0aGUgcHJvdG9jb2wgYnVmZmVyICovXG4gICAgcmVhZEJ5dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkSTMyKCk7XG4gICAgfSxcblxuICAgIC8qKiBSZXR1cm5zIHRoZSBhbiBvYmplY3Qgd2l0aCBhIHZhbHVlIHByb3BlcnR5IHNldCB0byB0aGUgXG4gICAgICAgIG5leHQgdmFsdWUgZm91bmQgaW4gdGhlIHByb3RvY29sIGJ1ZmZlciAqL1xuICAgIHJlYWRJMTY6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkSTMyKCk7XG4gICAgfSxcblxuICAgIC8qKiBSZXR1cm5zIHRoZSBhbiBvYmplY3Qgd2l0aCBhIHZhbHVlIHByb3BlcnR5IHNldCB0byB0aGUgXG4gICAgICAgIG5leHQgdmFsdWUgZm91bmQgaW4gdGhlIHByb3RvY29sIGJ1ZmZlciAqL1xuICAgIHJlYWRJMzI6IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgaWYgKGYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZiA9IHRoaXMucnN0YWNrW3RoaXMucnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHIgPSB7fTtcblxuICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBpZiAoZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByLnZhbHVlID0gZi5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGYgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgZm9yICh2YXIgaSBpbiBmKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJzdGFjay5wdXNoKGZbaV0pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBmW2ldO1xuXG4gICAgICAgICAgICAgICAgci52YWx1ZSA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHIudmFsdWUgPSBmO1xuICAgICAgICAgICAgdGhpcy5yc3RhY2sucG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcjtcbiAgICB9LFxuXG4gICAgLyoqIFJldHVybnMgdGhlIGFuIG9iamVjdCB3aXRoIGEgdmFsdWUgcHJvcGVydHkgc2V0IHRvIHRoZSBcbiAgICAgICAgbmV4dCB2YWx1ZSBmb3VuZCBpbiB0aGUgcHJvdG9jb2wgYnVmZmVyICovXG4gICAgcmVhZEk2NDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRJMzIoKTtcbiAgICB9LFxuXG4gICAgLyoqIFJldHVybnMgdGhlIGFuIG9iamVjdCB3aXRoIGEgdmFsdWUgcHJvcGVydHkgc2V0IHRvIHRoZSBcbiAgICAgICAgbmV4dCB2YWx1ZSBmb3VuZCBpbiB0aGUgcHJvdG9jb2wgYnVmZmVyICovXG4gICAgcmVhZERvdWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRJMzIoKTtcbiAgICB9LFxuXG4gICAgLyoqIFJldHVybnMgdGhlIGFuIG9iamVjdCB3aXRoIGEgdmFsdWUgcHJvcGVydHkgc2V0IHRvIHRoZSBcbiAgICAgICAgbmV4dCB2YWx1ZSBmb3VuZCBpbiB0aGUgcHJvdG9jb2wgYnVmZmVyICovXG4gICAgcmVhZFN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5yZWFkSTMyKCk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKiogUmV0dXJucyB0aGUgYW4gb2JqZWN0IHdpdGggYSB2YWx1ZSBwcm9wZXJ0eSBzZXQgdG8gdGhlIFxuICAgICAgICBuZXh0IHZhbHVlIGZvdW5kIGluIHRoZSBwcm90b2NvbCBidWZmZXIgKi9cbiAgICByZWFkQmluYXJ5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFN0cmluZygpO1xuICAgIH0sXG5cbiAgICAvKiogXG4gICAgICogTWV0aG9kIHRvIGFyYml0cmFyaWx5IHNraXAgb3ZlciBkYXRhICovXG4gICAgc2tpcDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB2YXIgcmV0LCBpO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgVGhyaWZ0LlR5cGUuU1RPUDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY2FzZSBUaHJpZnQuVHlwZS5CT09MOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRCb29sKCk7XG5cbiAgICAgICAgICAgIGNhc2UgVGhyaWZ0LlR5cGUuQllURTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkQnl0ZSgpO1xuXG4gICAgICAgICAgICBjYXNlIFRocmlmdC5UeXBlLkkxNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkSTE2KCk7XG5cbiAgICAgICAgICAgIGNhc2UgVGhyaWZ0LlR5cGUuSTMyOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRJMzIoKTtcblxuICAgICAgICAgICAgY2FzZSBUaHJpZnQuVHlwZS5JNjQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZEk2NCgpO1xuXG4gICAgICAgICAgICBjYXNlIFRocmlmdC5UeXBlLkRPVUJMRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkRG91YmxlKCk7XG5cbiAgICAgICAgICAgIGNhc2UgVGhyaWZ0LlR5cGUuU1RSSU5HOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRTdHJpbmcoKTtcblxuICAgICAgICAgICAgY2FzZSBUaHJpZnQuVHlwZS5TVFJVQ1Q6XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkU3RydWN0QmVnaW4oKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLnJlYWRGaWVsZEJlZ2luKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXQuZnR5cGUgPT0gVGhyaWZ0LlR5cGUuU1RPUCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lwKHJldC5mdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZEZpZWxkRW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0cnVjdEVuZCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjYXNlIFRocmlmdC5UeXBlLk1BUDpcbiAgICAgICAgICAgICAgICByZXQgPSB0aGlzLnJlYWRNYXBCZWdpbigpO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZXQuc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucnN0YWNrLmxlbmd0aCA+IHRoaXMucnBvc1t0aGlzLnJwb3MubGVuZ3RoIC0gMV0gKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lwKHJldC5rdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcChyZXQudnR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRNYXBFbmQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY2FzZSBUaHJpZnQuVHlwZS5TRVQ6XG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5yZWFkU2V0QmVnaW4oKTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmV0LnNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXAocmV0LmV0eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkU2V0RW5kKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNhc2UgVGhyaWZ0LlR5cGUuTElTVDpcbiAgICAgICAgICAgICAgICByZXQgPSB0aGlzLnJlYWRMaXN0QmVnaW4oKTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmV0LnNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXAocmV0LmV0eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkTGlzdEVuZCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vKipcbiAqIEluaXRpYWxpemVzIGEgTXV0aWxwbGV4UHJvdG9jb2wgSW1wbGVtZW50YXRpb24gYXMgYSBXcmFwcGVyIGZvciBUaHJpZnQuUHJvdG9jb2xcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5UaHJpZnQuTXVsdGlwbGV4UHJvdG9jb2wgPSBmdW5jdGlvbiAoc3J2TmFtZSwgdHJhbnMsIHN0cmljdFJlYWQsIHN0cmljdFdyaXRlKSB7XG4gICAgVGhyaWZ0LlByb3RvY29sLmNhbGwodGhpcywgdHJhbnMsIHN0cmljdFJlYWQsIHN0cmljdFdyaXRlKTtcbiAgICB0aGlzLnNlcnZpY2VOYW1lID0gc3J2TmFtZTtcbn07XG5UaHJpZnQuaW5oZXJpdHMoVGhyaWZ0Lk11bHRpcGxleFByb3RvY29sLCBUaHJpZnQuUHJvdG9jb2wsICdtdWx0aXBsZXhQcm90b2NvbCcpO1xuXG4vKiogT3ZlcnJpZGUgd3JpdGVNZXNzYWdlQmVnaW4gbWV0aG9kIG9mIHByb3RvdHlwZSovXG5UaHJpZnQuTXVsdGlwbGV4UHJvdG9jb2wucHJvdG90eXBlLndyaXRlTWVzc2FnZUJlZ2luID0gZnVuY3Rpb24gKG5hbWUsIHR5cGUsIHNlcWlkKSB7XG5cbiAgICBpZiAodHlwZSA9PT0gVGhyaWZ0Lk1lc3NhZ2VUeXBlLkNBTEwgfHwgdHlwZSA9PT0gVGhyaWZ0Lk1lc3NhZ2VUeXBlLk9ORVdBWSkge1xuICAgICAgICBUaHJpZnQuUHJvdG9jb2wucHJvdG90eXBlLndyaXRlTWVzc2FnZUJlZ2luLmNhbGwodGhpcywgdGhpcy5zZXJ2aWNlTmFtZSArIFwiOlwiICsgbmFtZSwgdHlwZSwgc2VxaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFRocmlmdC5Qcm90b2NvbC5wcm90b3R5cGUud3JpdGVNZXNzYWdlQmVnaW4uY2FsbCh0aGlzLCBuYW1lLCB0eXBlLCBzZXFpZCk7XG4gICAgfVxufTtcblxuVGhyaWZ0Lk11bHRpcGxleGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2VxaWQgPSAwO1xufTtcblxuLyoqIEluc3RhbnRpYXRlcyBhIG11bHRpcGxleGVkIGNsaWVudCBmb3IgYSBzcGVjaWZpYyBzZXJ2aWNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZXJ2aWNlTmFtZSAtIFRoZSB0cmFuc3BvcnQgdG8gc2VyaWFsaXplIHRvL2Zyb20uXG4gKiBAcGFyYW0ge1RocmlmdC5TZXJ2aWNlQ2xpZW50fSBTQ2wgLSBUaGUgU2VydmljZSBDbGllbnQgQ2xhc3NcbiAqIEBwYXJhbSB7VGhyaWZ0LlRyYW5zcG9ydH0gdHJhbnNwb3J0IC0gVGhyaWZ0LlRyYW5zcG9ydCBpbnN0YW5jZSB3aGljaCBwcm92aWRlcyByZW1vdGUgaG9zdDpwb3J0XG4gKiBAZXhhbXBsZVxuICogICAgdmFyIG1wID0gbmV3IFRocmlmdC5NdWx0aXBsZXhlcigpO1xuICogICAgdmFyIHRyYW5zcG9ydCA9IG5ldyBUaHJpZnQuVHJhbnNwb3J0KFwiaHR0cDovL2xvY2FsaG9zdDo5MDkwL2Zvby50aHJpZnRcIik7XG4gKiAgICB2YXIgcHJvdG9jb2wgPSBuZXcgVGhyaWZ0LlByb3RvY29sKHRyYW5zcG9ydCk7XG4gKiAgICB2YXIgY2xpZW50ID0gbXAuY3JlYXRlQ2xpZW50KCdBdXRoU2VydmljZScsIEF1dGhTZXJ2aWNlQ2xpZW50LCB0cmFuc3BvcnQpO1xuKi9cblRocmlmdC5NdWx0aXBsZXhlci5wcm90b3R5cGUuY3JlYXRlQ2xpZW50ID0gZnVuY3Rpb24gKHNlcnZpY2VOYW1lLCBTQ2wsIHRyYW5zcG9ydCkge1xuICAgIGlmIChTQ2wuQ2xpZW50KSB7XG4gICAgICAgIFNDbCA9IFNDbC5DbGllbnQ7XG4gICAgfVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBTQ2wucHJvdG90eXBlLm5ld19zZXFpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5zZXFpZCArPSAxO1xuICAgICAgICByZXR1cm4gc2VsZi5zZXFpZDtcbiAgICB9O1xuICAgIHZhciBjbGllbnQgPSBuZXcgU0NsKG5ldyBUaHJpZnQuTXVsdGlwbGV4UHJvdG9jb2woc2VydmljZU5hbWUsIHRyYW5zcG9ydCkpO1xuXG4gICAgcmV0dXJuIGNsaWVudDtcbn07XG5cblxuXG4iLCJ2YXIgVGhyaWZ0ID0gcmVxdWlyZSgndGhyaWZ0Jyk7XHJcbnZhciBUVXNlclNlcnZpY2VDbGllbnQgPSByZXF1aXJlKCdUVXNlclNlcnZpY2VDbGllbnQnKTtcclxuXHJcbnZhciB0cmFuc3BvcnQgPSBuZXcgVGhyaWZ0LlRyYW5zcG9ydChcImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC91c2VyXCIpO1xyXG52YXIgcHJvdG9jb2wgPSBuZXcgVGhyaWZ0LlByb3RvY29sKHRyYW5zcG9ydCk7XHJcbnZhciBjbGllbnQgPSBuZXcgVFVzZXJTZXJ2aWNlQ2xpZW50KHByb3RvY29sKTtcclxuXHJcbmNsaWVudC5maW5kVXNlcigxLCBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGUnKS5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeSh1c2VyKTtcclxufSk7XHJcbiJdfQ==
